{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "abd180db",
   "metadata": {
    "id": "abd180db"
   },
   "source": [
    "# Prediction of Diabetes Patient Readmission to Hospital"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "38090c2d",
   "metadata": {
    "id": "38090c2d"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7edf3e5",
   "metadata": {
    "id": "c7edf3e5"
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"diabetic_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfba6536",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "bfba6536",
    "outputId": "e0b36217-51e5-4fca-95c0-d119f51873ed"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>encounter_id</th>\n",
       "      <th>patient_nbr</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>discharge_disposition_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "      <th>...</th>\n",
       "      <th>citoglipton</th>\n",
       "      <th>insulin</th>\n",
       "      <th>glyburide-metformin</th>\n",
       "      <th>glipizide-metformin</th>\n",
       "      <th>glimepiride-pioglitazone</th>\n",
       "      <th>metformin-rosiglitazone</th>\n",
       "      <th>metformin-pioglitazone</th>\n",
       "      <th>change</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2278392</td>\n",
       "      <td>8222157</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[0-10)</td>\n",
       "      <td>?</td>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>149190</td>\n",
       "      <td>55629189</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[10-20)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64410</td>\n",
       "      <td>86047875</td>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>[20-30)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>500364</td>\n",
       "      <td>82442376</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[30-40)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16680</td>\n",
       "      <td>42519267</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[40-50)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101761</th>\n",
       "      <td>443847548</td>\n",
       "      <td>100162476</td>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Male</td>\n",
       "      <td>[70-80)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Down</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101762</th>\n",
       "      <td>443847782</td>\n",
       "      <td>74694222</td>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>[80-90)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101763</th>\n",
       "      <td>443854148</td>\n",
       "      <td>41088789</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[70-80)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Down</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101764</th>\n",
       "      <td>443857166</td>\n",
       "      <td>31693671</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[80-90)</td>\n",
       "      <td>?</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101765</th>\n",
       "      <td>443867222</td>\n",
       "      <td>175429310</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[70-80)</td>\n",
       "      <td>?</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>101766 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        encounter_id  patient_nbr             race  gender      age weight  \\\n",
       "0            2278392      8222157        Caucasian  Female   [0-10)      ?   \n",
       "1             149190     55629189        Caucasian  Female  [10-20)      ?   \n",
       "2              64410     86047875  AfricanAmerican  Female  [20-30)      ?   \n",
       "3             500364     82442376        Caucasian    Male  [30-40)      ?   \n",
       "4              16680     42519267        Caucasian    Male  [40-50)      ?   \n",
       "...              ...          ...              ...     ...      ...    ...   \n",
       "101761     443847548    100162476  AfricanAmerican    Male  [70-80)      ?   \n",
       "101762     443847782     74694222  AfricanAmerican  Female  [80-90)      ?   \n",
       "101763     443854148     41088789        Caucasian    Male  [70-80)      ?   \n",
       "101764     443857166     31693671        Caucasian  Female  [80-90)      ?   \n",
       "101765     443867222    175429310        Caucasian    Male  [70-80)      ?   \n",
       "\n",
       "        admission_type_id  discharge_disposition_id  admission_source_id  \\\n",
       "0                       6                        25                    1   \n",
       "1                       1                         1                    7   \n",
       "2                       1                         1                    7   \n",
       "3                       1                         1                    7   \n",
       "4                       1                         1                    7   \n",
       "...                   ...                       ...                  ...   \n",
       "101761                  1                         3                    7   \n",
       "101762                  1                         4                    5   \n",
       "101763                  1                         1                    7   \n",
       "101764                  2                         3                    7   \n",
       "101765                  1                         1                    7   \n",
       "\n",
       "        time_in_hospital  ... citoglipton insulin  glyburide-metformin  \\\n",
       "0                      1  ...          No      No                   No   \n",
       "1                      3  ...          No      Up                   No   \n",
       "2                      2  ...          No      No                   No   \n",
       "3                      2  ...          No      Up                   No   \n",
       "4                      1  ...          No  Steady                   No   \n",
       "...                  ...  ...         ...     ...                  ...   \n",
       "101761                 3  ...          No    Down                   No   \n",
       "101762                 5  ...          No  Steady                   No   \n",
       "101763                 1  ...          No    Down                   No   \n",
       "101764                10  ...          No      Up                   No   \n",
       "101765                 6  ...          No      No                   No   \n",
       "\n",
       "        glipizide-metformin  glimepiride-pioglitazone  \\\n",
       "0                        No                        No   \n",
       "1                        No                        No   \n",
       "2                        No                        No   \n",
       "3                        No                        No   \n",
       "4                        No                        No   \n",
       "...                     ...                       ...   \n",
       "101761                   No                        No   \n",
       "101762                   No                        No   \n",
       "101763                   No                        No   \n",
       "101764                   No                        No   \n",
       "101765                   No                        No   \n",
       "\n",
       "        metformin-rosiglitazone  metformin-pioglitazone  change diabetesMed  \\\n",
       "0                            No                      No      No          No   \n",
       "1                            No                      No      Ch         Yes   \n",
       "2                            No                      No      No         Yes   \n",
       "3                            No                      No      Ch         Yes   \n",
       "4                            No                      No      Ch         Yes   \n",
       "...                         ...                     ...     ...         ...   \n",
       "101761                       No                      No      Ch         Yes   \n",
       "101762                       No                      No      No         Yes   \n",
       "101763                       No                      No      Ch         Yes   \n",
       "101764                       No                      No      Ch         Yes   \n",
       "101765                       No                      No      No          No   \n",
       "\n",
       "       readmitted  \n",
       "0              NO  \n",
       "1             >30  \n",
       "2              NO  \n",
       "3              NO  \n",
       "4              NO  \n",
       "...           ...  \n",
       "101761        >30  \n",
       "101762         NO  \n",
       "101763         NO  \n",
       "101764         NO  \n",
       "101765         NO  \n",
       "\n",
       "[101766 rows x 50 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8aa9857b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8aa9857b",
    "outputId": "c44a7e98-a923-44ab-b60f-5b7f26510f6f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101766, 50)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "05320325",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "05320325",
    "outputId": "caa79b21-2c3b-47a5-c46d-0ddd046a0554"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['encounter_id', 'patient_nbr', 'race', 'gender', 'age', 'weight',\n",
       "       'admission_type_id', 'discharge_disposition_id', 'admission_source_id',\n",
       "       'time_in_hospital', 'payer_code', 'medical_specialty',\n",
       "       'num_lab_procedures', 'num_procedures', 'num_medications',\n",
       "       'number_outpatient', 'number_emergency', 'number_inpatient', 'diag_1',\n",
       "       'diag_2', 'diag_3', 'number_diagnoses', 'max_glu_serum', 'A1Cresult',\n",
       "       'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',\n",
       "       'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',\n",
       "       'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',\n",
       "       'tolazamide', 'examide', 'citoglipton', 'insulin',\n",
       "       'glyburide-metformin', 'glipizide-metformin',\n",
       "       'glimepiride-pioglitazone', 'metformin-rosiglitazone',\n",
       "       'metformin-pioglitazone', 'change', 'diabetesMed', 'readmitted'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "181c81af",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "181c81af",
    "outputId": "1a82ed93-de00-4b65-cfac-1ed34f8cdfd5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 101766 entries, 0 to 101765\n",
      "Data columns (total 50 columns):\n",
      " #   Column                    Non-Null Count   Dtype \n",
      "---  ------                    --------------   ----- \n",
      " 0   encounter_id              101766 non-null  int64 \n",
      " 1   patient_nbr               101766 non-null  int64 \n",
      " 2   race                      101766 non-null  object\n",
      " 3   gender                    101766 non-null  object\n",
      " 4   age                       101766 non-null  object\n",
      " 5   weight                    101766 non-null  object\n",
      " 6   admission_type_id         101766 non-null  int64 \n",
      " 7   discharge_disposition_id  101766 non-null  int64 \n",
      " 8   admission_source_id       101766 non-null  int64 \n",
      " 9   time_in_hospital          101766 non-null  int64 \n",
      " 10  payer_code                101766 non-null  object\n",
      " 11  medical_specialty         101766 non-null  object\n",
      " 12  num_lab_procedures        101766 non-null  int64 \n",
      " 13  num_procedures            101766 non-null  int64 \n",
      " 14  num_medications           101766 non-null  int64 \n",
      " 15  number_outpatient         101766 non-null  int64 \n",
      " 16  number_emergency          101766 non-null  int64 \n",
      " 17  number_inpatient          101766 non-null  int64 \n",
      " 18  diag_1                    101766 non-null  object\n",
      " 19  diag_2                    101766 non-null  object\n",
      " 20  diag_3                    101766 non-null  object\n",
      " 21  number_diagnoses          101766 non-null  int64 \n",
      " 22  max_glu_serum             101766 non-null  object\n",
      " 23  A1Cresult                 101766 non-null  object\n",
      " 24  metformin                 101766 non-null  object\n",
      " 25  repaglinide               101766 non-null  object\n",
      " 26  nateglinide               101766 non-null  object\n",
      " 27  chlorpropamide            101766 non-null  object\n",
      " 28  glimepiride               101766 non-null  object\n",
      " 29  acetohexamide             101766 non-null  object\n",
      " 30  glipizide                 101766 non-null  object\n",
      " 31  glyburide                 101766 non-null  object\n",
      " 32  tolbutamide               101766 non-null  object\n",
      " 33  pioglitazone              101766 non-null  object\n",
      " 34  rosiglitazone             101766 non-null  object\n",
      " 35  acarbose                  101766 non-null  object\n",
      " 36  miglitol                  101766 non-null  object\n",
      " 37  troglitazone              101766 non-null  object\n",
      " 38  tolazamide                101766 non-null  object\n",
      " 39  examide                   101766 non-null  object\n",
      " 40  citoglipton               101766 non-null  object\n",
      " 41  insulin                   101766 non-null  object\n",
      " 42  glyburide-metformin       101766 non-null  object\n",
      " 43  glipizide-metformin       101766 non-null  object\n",
      " 44  glimepiride-pioglitazone  101766 non-null  object\n",
      " 45  metformin-rosiglitazone   101766 non-null  object\n",
      " 46  metformin-pioglitazone    101766 non-null  object\n",
      " 47  change                    101766 non-null  object\n",
      " 48  diabetesMed               101766 non-null  object\n",
      " 49  readmitted                101766 non-null  object\n",
      "dtypes: int64(13), object(37)\n",
      "memory usage: 38.8+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f830115f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f830115f",
    "outputId": "5f87c269-c9dd-488a-e23e-87e67a501896"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "encounter_id                0\n",
       "patient_nbr                 0\n",
       "race                        0\n",
       "gender                      0\n",
       "age                         0\n",
       "weight                      0\n",
       "admission_type_id           0\n",
       "discharge_disposition_id    0\n",
       "admission_source_id         0\n",
       "time_in_hospital            0\n",
       "payer_code                  0\n",
       "medical_specialty           0\n",
       "num_lab_procedures          0\n",
       "num_procedures              0\n",
       "num_medications             0\n",
       "number_outpatient           0\n",
       "number_emergency            0\n",
       "number_inpatient            0\n",
       "diag_1                      0\n",
       "diag_2                      0\n",
       "diag_3                      0\n",
       "number_diagnoses            0\n",
       "max_glu_serum               0\n",
       "A1Cresult                   0\n",
       "metformin                   0\n",
       "repaglinide                 0\n",
       "nateglinide                 0\n",
       "chlorpropamide              0\n",
       "glimepiride                 0\n",
       "acetohexamide               0\n",
       "glipizide                   0\n",
       "glyburide                   0\n",
       "tolbutamide                 0\n",
       "pioglitazone                0\n",
       "rosiglitazone               0\n",
       "acarbose                    0\n",
       "miglitol                    0\n",
       "troglitazone                0\n",
       "tolazamide                  0\n",
       "examide                     0\n",
       "citoglipton                 0\n",
       "insulin                     0\n",
       "glyburide-metformin         0\n",
       "glipizide-metformin         0\n",
       "glimepiride-pioglitazone    0\n",
       "metformin-rosiglitazone     0\n",
       "metformin-pioglitazone      0\n",
       "change                      0\n",
       "diabetesMed                 0\n",
       "readmitted                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "56e5ce34",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "56e5ce34",
    "outputId": "98b62cbb-224c-4d7a-85b3-fbce571c05a7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "encounter_id:101766unique values\n",
      "patient_nbr:71518unique values\n",
      "race\n",
      "['Caucasian' 'AfricanAmerican' '?' 'Other' 'Asian' 'Hispanic']\n",
      "gender\n",
      "['Female' 'Male' 'Unknown/Invalid']\n",
      "age\n",
      "['[0-10)' '[10-20)' '[20-30)' '[30-40)' '[40-50)' '[50-60)' '[60-70)'\n",
      " '[70-80)' '[80-90)' '[90-100)']\n",
      "weight\n",
      "['?' '[75-100)' '[50-75)' '[0-25)' '[100-125)' '[25-50)' '[125-150)'\n",
      " '[175-200)' '[150-175)' '>200']\n",
      "admission_type_id\n",
      "[6 1 2 3 4 5 8 7]\n",
      "discharge_disposition_id\n",
      "[25  1  3  6  2  5 11  7 10  4 14 18  8 13 12 16 17 22 23  9 20 15 24 28\n",
      " 19 27]\n",
      "admission_source_id\n",
      "[ 1  7  2  4  5  6 20  3 17  8  9 14 10 22 11 25 13]\n",
      "time_in_hospital\n",
      "[ 1  3  2  4  5 13 12  9  7 10  6 11  8 14]\n",
      "payer_code\n",
      "['?' 'MC' 'MD' 'HM' 'UN' 'BC' 'SP' 'CP' 'SI' 'DM' 'CM' 'CH' 'PO' 'WC' 'OT'\n",
      " 'OG' 'MP' 'FR']\n",
      "medical_specialty:73unique values\n",
      "num_lab_procedures:118unique values\n",
      "num_procedures\n",
      "[0 5 1 6 2 3 4]\n",
      "num_medications:75unique values\n",
      "number_outpatient:39unique values\n",
      "number_emergency:33unique values\n",
      "number_inpatient\n",
      "[ 0  1  2  3  6  5  4  7  8  9 15 10 11 14 12 13 17 16 21 18 19]\n",
      "diag_1:717unique values\n",
      "diag_2:749unique values\n",
      "diag_3:790unique values\n",
      "number_diagnoses\n",
      "[ 1  9  6  7  5  8  3  4  2 16 12 13 15 10 11 14]\n",
      "max_glu_serum\n",
      "['None' '>300' 'Norm' '>200']\n",
      "A1Cresult\n",
      "['None' '>7' '>8' 'Norm']\n",
      "metformin\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "repaglinide\n",
      "['No' 'Up' 'Steady' 'Down']\n",
      "nateglinide\n",
      "['No' 'Steady' 'Down' 'Up']\n",
      "chlorpropamide\n",
      "['No' 'Steady' 'Down' 'Up']\n",
      "glimepiride\n",
      "['No' 'Steady' 'Down' 'Up']\n",
      "acetohexamide\n",
      "['No' 'Steady']\n",
      "glipizide\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "glyburide\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "tolbutamide\n",
      "['No' 'Steady']\n",
      "pioglitazone\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "rosiglitazone\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "acarbose\n",
      "['No' 'Steady' 'Up' 'Down']\n",
      "miglitol\n",
      "['No' 'Steady' 'Down' 'Up']\n",
      "troglitazone\n",
      "['No' 'Steady']\n",
      "tolazamide\n",
      "['No' 'Steady' 'Up']\n",
      "examide\n",
      "['No']\n",
      "citoglipton\n",
      "['No']\n",
      "insulin\n",
      "['No' 'Up' 'Steady' 'Down']\n",
      "glyburide-metformin\n",
      "['No' 'Steady' 'Down' 'Up']\n",
      "glipizide-metformin\n",
      "['No' 'Steady']\n",
      "glimepiride-pioglitazone\n",
      "['No' 'Steady']\n",
      "metformin-rosiglitazone\n",
      "['No' 'Steady']\n",
      "metformin-pioglitazone\n",
      "['No' 'Steady']\n",
      "change\n",
      "['No' 'Ch']\n",
      "diabetesMed\n",
      "['No' 'Yes']\n",
      "readmitted\n",
      "['NO' '>30' '<30']\n"
     ]
    }
   ],
   "source": [
    "# for each column\n",
    "for c in list(data.columns):\n",
    "    #  get a list of unique values\n",
    "    n=data[c].unique()\n",
    "    # if the number of unique values is less than 30 print values ,otherwise print the number of unoque values\n",
    "    if len(n)<30:\n",
    "        print(c)\n",
    "        print(n)\n",
    "    else:\n",
    "        print(c+':'+str(len(n))+'unique values')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70881769",
   "metadata": {
    "id": "70881769"
   },
   "source": [
    "# Features and their description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84edc39d",
   "metadata": {
    "id": "84edc39d"
   },
   "source": [
    "1. Encounter Id - Unique identifier of an encounter\n",
    "2. Patient Number - Unique identifier of a patient\n",
    "3. Race - Caucasian, Asian, African American, Hispanic and Other\n",
    "4. Gender - Categorized into Male, Female and Unknown/Invalid\n",
    "5. Age - Grouped in 10-year intervals: [(0-10), (10-20).....,(90-100)]\n",
    "6. Weight - Weight in pounds (grouped in 25 kg)\n",
    "7. Admission_Type_id - Integer identifier corresponding to 8 different categories (Emergency, Urgent, Elective, Newborn, Not Available, NULL,Trauma Center, Not Mapped)\n",
    "8. Discharge_disposition_id - Integer identifier corresponding to 26 different categories\n",
    "(Discharged to home, Discharged/transferred to another short term hospital, Discharged/transferred to SNF, Discharged/transferred to ICF, Discharged/transferred to another type of inpatient care institution, Discharged/transferred to home with home health service, Left AMA, Discharged/transferred to home under care of Home IV provider, Admitted as an inpatient to this hospital, Neonate discharged to another hospital for neonatal aftercare, Expired, Still patient or expected to return for outpatient services, Hospice / home, Hospice / medical facility, Discharged/transferred within this institution to Medicare approved swing bed, Discharged/transferred/referred another institution for outpatient services, Discharged/transferred/referred to this institution for outpatient services, NULL, Expired at home. Medicaid only, hospice, Expired in a medical facility. Medicaid only, hospice, Expired, place unknown. Medicaid only, hospice, Discharged/transferred to another rehab fac including rehab units of a hospital, Discharged/transferred to a long term care hospital, Discharged/transferred to a nursing facility certified under Medicaid but not certified under Medicare, Not Mapped, Unknown/Invalid, Discharged/transferred to another Type of Health Care Institution not Defined Elsewhere, Discharged/transferred to a federal health care facility, Discharged/transferred/referred to a psychiatric hospital of psychiatric distinct part unit of a hospital, Discharged/transferred to a Critical Access Hospital (CAH).)\n",
    "\n",
    "9. Admission_source_id - Integer identifier corresponding to 26 different categories.\n",
    "(Physician Referral, Clinic Referral, HMO Referral, Transfer from a hospital, Transfer from a Skilled Nursing Facility (SNF), Transfer from another health care facility, Emergency Room, Court/Law Enforcement, Not Available, Transfer from critial access hospital, Normal Delivery, Premature Delivery, Sick Baby, Extramural Birth, Not Available, NULL, Transfer From Another Home Health Agency, Readmission to Same Home Health Agency, Not Mapped, Unknown/Invalid, Transfer from hospital inpt/same fac reslt in a sep claim, Born inside this hospital, Born outside this hospital, Transfer from Ambulatory Surgery Center, Transfer from Hospice\n",
    "\n",
    "10. Time in hospital - Number of days from admission to discharge\n",
    "11. Payer code - Identifier corresponding to 18 distinct values for example Blue Cross, Self Pay, etc\n",
    "12. Medical Speciality - Identifier corresponding to 73 distinct values for example Internal Medicine, Emergency/Trauma etc\n",
    "13. Number of lab procedures - Number of lab tests performed during the encounter\n",
    "14. Number of procudures - Number of procedures (other than lab tests) performed during the encounter\n",
    "15. Number of medications - Number of distinct generic names administered during the encounter\n",
    "16. Number of outpatient visits - Number of outpatient visits of the patient in the year preceding the encounter\n",
    "17. Number of emergency visits - Number of emergency visits of the patient in the year preceding the encounter\n",
    "18. Number of inpatient visits - Number of inpatient visits of the patient in the year preceding the encounter\n",
    "19. Diagnosis 1 - The primary diagnosis (coded as first three digits of ICD9)\n",
    "20. Diagnosis 2 - The secondary diagnosis (coded as first three digits of ICD9)\n",
    "21. Disgnosis 3 - Additional secondary diagnosis (coded as first three digits of ICD9)\n",
    "22. Number of diagnoses - Number of diagnoses entered to the system\n",
    "23. Glucose serum test results - Indicates the range of the result or if the test was not taken. Values: “>200,” “>300,” “normal,” and “none” if not measured\n",
    "24. A1c test result Indicates the range of the result or if the test was not taken. Values: “>8” if the result was greater than 8%, “>7” if the result was greater than 7% but less than 8%, “normal” if the result was less than 7%, and “none” if not measured.\n",
    "25. Change of medications Indicates if there was a change in diabetic medications (either dosage or generic name). Values: “change” and “no change”\n",
    "26. Diabetes medications Indicates if there was any diabetic medication prescribed. Values: “yes” and “no”\n",
    "27. 24 different kind of medical drugs. The feature indicates whether the drug was prescribed or there was a change in the dosage. Values: “up” if the dosage was increased during the encounter, “down” if the dosage was decreased, “steady” if the dosage did not change, and “no” if the drug was not prescribed\n",
    "28. Readmitted Days to inpatient readmission. Values: “❤0” if the patient was readmitted in less than 30 days, “>30” if the patient was readmitted in more than 30 days, and “No” for no record of readmission\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "37ed8031",
   "metadata": {
    "id": "37ed8031"
   },
   "outputs": [],
   "source": [
    "# There is some missing data that are represented with ?. We will replace this with nan and deal in feature engineering section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1715dc0b",
   "metadata": {
    "id": "1715dc0b"
   },
   "outputs": [],
   "source": [
    "data.replace(\"?\",np.nan,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "905bee39",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "905bee39",
    "outputId": "19d369a5-4adb-4ca6-820c-0664924eb0f5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "encounter_id                    0\n",
       "patient_nbr                     0\n",
       "race                         2273\n",
       "gender                          0\n",
       "age                             0\n",
       "weight                      98569\n",
       "admission_type_id               0\n",
       "discharge_disposition_id        0\n",
       "admission_source_id             0\n",
       "time_in_hospital                0\n",
       "payer_code                  40256\n",
       "medical_specialty           49949\n",
       "num_lab_procedures              0\n",
       "num_procedures                  0\n",
       "num_medications                 0\n",
       "number_outpatient               0\n",
       "number_emergency                0\n",
       "number_inpatient                0\n",
       "diag_1                         21\n",
       "diag_2                        358\n",
       "diag_3                       1423\n",
       "number_diagnoses                0\n",
       "max_glu_serum                   0\n",
       "A1Cresult                       0\n",
       "metformin                       0\n",
       "repaglinide                     0\n",
       "nateglinide                     0\n",
       "chlorpropamide                  0\n",
       "glimepiride                     0\n",
       "acetohexamide                   0\n",
       "glipizide                       0\n",
       "glyburide                       0\n",
       "tolbutamide                     0\n",
       "pioglitazone                    0\n",
       "rosiglitazone                   0\n",
       "acarbose                        0\n",
       "miglitol                        0\n",
       "troglitazone                    0\n",
       "tolazamide                      0\n",
       "examide                         0\n",
       "citoglipton                     0\n",
       "insulin                         0\n",
       "glyburide-metformin             0\n",
       "glipizide-metformin             0\n",
       "glimepiride-pioglitazone        0\n",
       "metformin-rosiglitazone         0\n",
       "metformin-pioglitazone          0\n",
       "change                          0\n",
       "diabetesMed                     0\n",
       "readmitted                      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04885565",
   "metadata": {
    "id": "04885565"
   },
   "source": [
    "The most important column here is readmitted, which tells us if a patient was hospitalized within 30 days, greater than 30 days or not readmitted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5487b8d4",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5487b8d4",
    "outputId": "78d05dcf-4f86-4317-8097-a274185171c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns: 50\n"
     ]
    }
   ],
   "source": [
    "print('Number of columns:',len(data.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e2d28708",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "e2d28708",
    "outputId": "1ad117a0-52ab-40e6-bfbe-fd2395fba53a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>encounter_id</th>\n",
       "      <th>patient_nbr</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>discharge_disposition_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2278392</td>\n",
       "      <td>8222157</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[0-10)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>149190</td>\n",
       "      <td>55629189</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[10-20)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64410</td>\n",
       "      <td>86047875</td>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>[20-30)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>500364</td>\n",
       "      <td>82442376</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[30-40)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16680</td>\n",
       "      <td>42519267</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[40-50)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   encounter_id  patient_nbr             race  gender      age weight  \\\n",
       "0       2278392      8222157        Caucasian  Female   [0-10)    NaN   \n",
       "1        149190     55629189        Caucasian  Female  [10-20)    NaN   \n",
       "2         64410     86047875  AfricanAmerican  Female  [20-30)    NaN   \n",
       "3        500364     82442376        Caucasian    Male  [30-40)    NaN   \n",
       "4         16680     42519267        Caucasian    Male  [40-50)    NaN   \n",
       "\n",
       "   admission_type_id  discharge_disposition_id  admission_source_id  \\\n",
       "0                  6                        25                    1   \n",
       "1                  1                         1                    7   \n",
       "2                  1                         1                    7   \n",
       "3                  1                         1                    7   \n",
       "4                  1                         1                    7   \n",
       "\n",
       "   time_in_hospital  \n",
       "0                 1  \n",
       "1                 3  \n",
       "2                 2  \n",
       "3                 2  \n",
       "4                 1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[list(data.columns)[:10]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7feb0827",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "7feb0827",
    "outputId": "f00ce82d-9549-436a-9e77-c8a42987acd2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payer_code</th>\n",
       "      <th>medical_specialty</th>\n",
       "      <th>num_lab_procedures</th>\n",
       "      <th>num_procedures</th>\n",
       "      <th>num_medications</th>\n",
       "      <th>number_outpatient</th>\n",
       "      <th>number_emergency</th>\n",
       "      <th>number_inpatient</th>\n",
       "      <th>diag_1</th>\n",
       "      <th>diag_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Pediatrics-Endocrinology</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>250.83</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>276</td>\n",
       "      <td>250.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>648</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>250.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>197</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  payer_code         medical_specialty  num_lab_procedures  num_procedures  \\\n",
       "0        NaN  Pediatrics-Endocrinology                  41               0   \n",
       "1        NaN                       NaN                  59               0   \n",
       "2        NaN                       NaN                  11               5   \n",
       "3        NaN                       NaN                  44               1   \n",
       "4        NaN                       NaN                  51               0   \n",
       "\n",
       "   num_medications  number_outpatient  number_emergency  number_inpatient  \\\n",
       "0                1                  0                 0                 0   \n",
       "1               18                  0                 0                 0   \n",
       "2               13                  2                 0                 1   \n",
       "3               16                  0                 0                 0   \n",
       "4                8                  0                 0                 0   \n",
       "\n",
       "   diag_1  diag_2  \n",
       "0  250.83     NaN  \n",
       "1     276  250.01  \n",
       "2     648     250  \n",
       "3       8  250.43  \n",
       "4     197     157  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[list(data.columns)[10:20]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "69372760",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "69372760",
    "outputId": "578025ff-4946-466d-8a47-aaa808f712a6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>diag_3</th>\n",
       "      <th>number_diagnoses</th>\n",
       "      <th>max_glu_serum</th>\n",
       "      <th>A1Cresult</th>\n",
       "      <th>metformin</th>\n",
       "      <th>repaglinide</th>\n",
       "      <th>nateglinide</th>\n",
       "      <th>chlorpropamide</th>\n",
       "      <th>glimepiride</th>\n",
       "      <th>acetohexamide</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>255</td>\n",
       "      <td>9</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>V27</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>403</td>\n",
       "      <td>7</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>250</td>\n",
       "      <td>5</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  diag_3  number_diagnoses max_glu_serum A1Cresult metformin repaglinide  \\\n",
       "0    NaN                 1          None      None        No          No   \n",
       "1    255                 9          None      None        No          No   \n",
       "2    V27                 6          None      None        No          No   \n",
       "3    403                 7          None      None        No          No   \n",
       "4    250                 5          None      None        No          No   \n",
       "\n",
       "  nateglinide chlorpropamide glimepiride acetohexamide  \n",
       "0          No             No          No            No  \n",
       "1          No             No          No            No  \n",
       "2          No             No          No            No  \n",
       "3          No             No          No            No  \n",
       "4          No             No          No            No  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[list(data.columns)[20:30]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df70b831",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "df70b831",
    "outputId": "bbda0ff2-1027-4d7f-91bc-4b8fb8ed3982"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>glipizide</th>\n",
       "      <th>glyburide</th>\n",
       "      <th>tolbutamide</th>\n",
       "      <th>pioglitazone</th>\n",
       "      <th>rosiglitazone</th>\n",
       "      <th>acarbose</th>\n",
       "      <th>miglitol</th>\n",
       "      <th>troglitazone</th>\n",
       "      <th>tolazamide</th>\n",
       "      <th>examide</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  glipizide glyburide tolbutamide pioglitazone rosiglitazone acarbose  \\\n",
       "0        No        No          No           No            No       No   \n",
       "1        No        No          No           No            No       No   \n",
       "2    Steady        No          No           No            No       No   \n",
       "3        No        No          No           No            No       No   \n",
       "4    Steady        No          No           No            No       No   \n",
       "\n",
       "  miglitol troglitazone tolazamide examide  \n",
       "0       No           No         No      No  \n",
       "1       No           No         No      No  \n",
       "2       No           No         No      No  \n",
       "3       No           No         No      No  \n",
       "4       No           No         No      No  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[list(data.columns)[30:40]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "395b9c08",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "395b9c08",
    "outputId": "e736cb36-a79c-4867-922a-f408cbb77972"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>citoglipton</th>\n",
       "      <th>insulin</th>\n",
       "      <th>glyburide-metformin</th>\n",
       "      <th>glipizide-metformin</th>\n",
       "      <th>glimepiride-pioglitazone</th>\n",
       "      <th>metformin-rosiglitazone</th>\n",
       "      <th>metformin-pioglitazone</th>\n",
       "      <th>change</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>No</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  citoglipton insulin glyburide-metformin glipizide-metformin  \\\n",
       "0          No      No                  No                  No   \n",
       "1          No      Up                  No                  No   \n",
       "2          No      No                  No                  No   \n",
       "3          No      Up                  No                  No   \n",
       "4          No  Steady                  No                  No   \n",
       "\n",
       "  glimepiride-pioglitazone metformin-rosiglitazone metformin-pioglitazone  \\\n",
       "0                       No                      No                     No   \n",
       "1                       No                      No                     No   \n",
       "2                       No                      No                     No   \n",
       "3                       No                      No                     No   \n",
       "4                       No                      No                     No   \n",
       "\n",
       "  change diabetesMed readmitted  \n",
       "0     No          No         NO  \n",
       "1     Ch         Yes        >30  \n",
       "2     No         Yes         NO  \n",
       "3     Ch         Yes         NO  \n",
       "4     Ch         Yes         NO  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[list(data.columns)[40:50]].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35122643",
   "metadata": {
    "id": "35122643"
   },
   "source": [
    "From analysis of the columns, we can see there are a mix of categorical (non-numeric) and numerical data. A few things to point out,"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2503b1a9",
   "metadata": {
    "id": "2503b1a9"
   },
   "source": [
    "- there are missing values in race,weight,payer_code, medical_specialty,diag_1,diag_2, diag_3\n",
    "- encounter_id and patient_nbr: these are just identifiers and not useful variables\n",
    "- age and weight: are categorical in this data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "09e134f1",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "09e134f1",
    "outputId": "e0c88859-cca3-4cf0-edd1-4b16d2b9a153"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weight               98569\n",
       "medical_specialty    49949\n",
       "payer_code           40256\n",
       "race                  2273\n",
       "diag_3                1423\n",
       "diag_2                 358\n",
       "diag_1                  21\n",
       "encounter_id             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "data.isnull().sum().sort_values(ascending = False).head(8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "270c7c1f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "270c7c1f",
    "outputId": "01991939-cece-4679-e298-e74c86717e4b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "weight               96.858479\n",
       "medical_specialty    49.082208\n",
       "payer_code           39.557416\n",
       "race                  2.233555\n",
       "diag_3                1.398306\n",
       "diag_2                0.351787\n",
       "diag_1                0.020636\n",
       "encounter_id          0.000000\n",
       "tolazamide            0.000000\n",
       "glyburide             0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percent_missing = data.isnull().sum() * 100 / len(data)\n",
    "percent_missing.sort_values(ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "198645bd",
   "metadata": {
    "id": "198645bd"
   },
   "source": [
    "more than 96 % of weight are missing, so we can drop the column\n",
    "\n",
    "encounter_id and patient_nbr: these are just identifiers and not useful variables so they can be dropped, weight has more than 96% of null values.So drop weight ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3b96d003",
   "metadata": {
    "id": "3b96d003"
   },
   "outputs": [],
   "source": [
    "data=data.drop(columns=['encounter_id','patient_nbr','weight'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20f3c274",
   "metadata": {
    "id": "20f3c274"
   },
   "source": [
    "# Race "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34be04ed",
   "metadata": {
    "id": "34be04ed"
   },
   "source": [
    "race : It is a categorical variable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5c71823",
   "metadata": {
    "id": "c5c71823"
   },
   "source": [
    "Here we will replace the missing data points values with 'Other' category, as most likely people who skip filling their race have done that because they couldn't find their race listed within the options."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a0911e70",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "a0911e70",
    "outputId": "6df98209-0ea5-4b6b-ba97-7355ae865b6d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Caucasian          76099\n",
       "AfricanAmerican    19210\n",
       "Hispanic            2037\n",
       "Other               1506\n",
       "Asian                641\n",
       "Name: race, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['race'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "af4eead6",
   "metadata": {
    "id": "af4eead6"
   },
   "outputs": [],
   "source": [
    "data['race'].fillna('Other',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5b041592",
   "metadata": {
    "id": "5b041592"
   },
   "outputs": [],
   "source": [
    "mapped_race={\"Hispanic\":\"Other\",\"Asian\":\"Other\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ea231eea",
   "metadata": {
    "id": "ea231eea"
   },
   "outputs": [],
   "source": [
    "data['race']=data['race'].replace(mapped_race)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "be4aef14",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "be4aef14",
    "outputId": "dbf7f3fd-f240-4bdb-8458-ec004fe97da6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Caucasian', 'AfricanAmerican', 'Other'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['race'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cc9a1b4f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "cc9a1b4f",
    "outputId": "1bf4e9c3-06f2-40c9-8f72-cf5461a76b66"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='race'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axes = plt.subplots(1,2, figsize = (18,6))\n",
    "plot = sns.barplot(data=data, x=data['race'].value_counts().index, y = data['race'].value_counts().values, ax = axes[0])\n",
    "for p in plot.patches:\n",
    "    plot.annotate(p.get_height(), (p.get_x()+p.get_width()/5, p.get_height()+100))\n",
    "data['race'].value_counts().plot(kind = 'pie', autopct = '%1.2f%%', ax = axes[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f8f1ab6",
   "metadata": {
    "id": "1f8f1ab6"
   },
   "source": [
    "From the above bar and pie chart we can clearly see that Caucasian race are domination with close to 77%, followed by AfricanAmerican with around 19%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c2bb4ec",
   "metadata": {
    "id": "0c2bb4ec"
   },
   "source": [
    "# Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4f4dfdde",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4f4dfdde",
    "outputId": "c2115e32-e25c-4ca5-a025-bddf36937db4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female             54708\n",
       "Male               47055\n",
       "Unknown/Invalid        3\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9cec5f1",
   "metadata": {
    "id": "d9cec5f1"
   },
   "source": [
    "There is a 3rd category of Unknown/Invalid which are missing/unknown values ,as there count is less so they can be dropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cb5a5835",
   "metadata": {
    "id": "cb5a5835"
   },
   "outputs": [],
   "source": [
    "data.drop(data[data.gender=='Unknown/Invalid'].index, inplace=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "12febc81",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "12febc81",
    "outputId": "c94c0cf4-16dd-4937-c366-7283ef694536"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    54708\n",
       "Male      47055\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7c88583c",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "7c88583c",
    "outputId": "20c35153-5888-4b91-ee96-ca644ce7d5da"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = \"gender\", data = data)\n",
    "plt.title(\"Distribution of Number of Gender\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2853713f",
   "metadata": {
    "id": "2853713f"
   },
   "source": [
    "# Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7e3d9902",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7e3d9902",
    "outputId": "3f77ee27-9b76-4f71-9eab-2bfbf309fd59"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[70-80)     26066\n",
       "[60-70)     22482\n",
       "[50-60)     17256\n",
       "[80-90)     17197\n",
       "[40-50)      9685\n",
       "[30-40)      3775\n",
       "[90-100)     2793\n",
       "[20-30)      1657\n",
       "[10-20)       691\n",
       "[0-10)        161\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b8c419e6",
   "metadata": {
    "id": "b8c419e6"
   },
   "outputs": [],
   "source": [
    "data['age']=data['age'].replace({'[0-10)':5, '[10-20)':15, '[20-30)':25, '[30-40)':35, '[40-50)':45, '[50-60)':55,\n",
    "       '[60-70)':65, '[70-80)':75, '[80-90)':85, '[90-100)':95})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ea7621c1",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ea7621c1",
    "outputId": "6022e0e2-8e10-4d41-99f5-220d03e3ba0c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "75    26066\n",
       "65    22482\n",
       "55    17256\n",
       "85    17197\n",
       "45     9685\n",
       "35     3775\n",
       "95     2793\n",
       "25     1657\n",
       "15      691\n",
       "5       161\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "82e67510",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "82e67510",
    "outputId": "3215c1b9-2a57-4318-de3e-36c261586881"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"age\", data = data)\n",
    "#plt.xticks(rotation = 90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c994796d",
   "metadata": {
    "id": "c994796d"
   },
   "source": [
    "# admission_type_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "97d14c05",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "97d14c05",
    "outputId": "fb3755f3-46b7-44c6-c002-2fea0c69cf9e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data['admission_type_id'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "130f96ab",
   "metadata": {
    "id": "130f96ab"
   },
   "source": [
    "There are 8 unique values ranging from 1 to 8. These 8 values correspond to :\n",
    "\n",
    "1 Emergency\n",
    "\n",
    "2 Urgent\n",
    "\n",
    "3 Elective\n",
    "\n",
    "4 Newborn\n",
    "\n",
    "5 Not Available\n",
    "\n",
    "6 NULL\n",
    "\n",
    "7 Trauma Center\n",
    "\n",
    "8 Not Mapped\n",
    "\n",
    "For further analysis we can merger these categories into less number of categories.\n",
    "\n",
    "Emeregncy/Urgent/Trauma Center ---> Emergency\n",
    "\n",
    "Not Available/Null/Not Mapped ---> Not Available\n",
    "\n",
    "Elective ---> Elective\n",
    "\n",
    "New Born ---> New Born"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6346ffcb",
   "metadata": {
    "id": "6346ffcb"
   },
   "outputs": [],
   "source": [
    "data['admission_type_id']=data['admission_type_id'].replace({1:'Emergency',2:'Emergency',7:'Emergency',\n",
    "                                 5:'Not Available', 6:'Not Available', 8:'Not Available',\n",
    "                                 3:'Elective',4:'Newborn'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c800f8ae",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "c800f8ae",
    "outputId": "b650e096-801b-40eb-ca6d-e8344d6dbb21"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data['admission_type_id'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "426db591",
   "metadata": {
    "id": "426db591"
   },
   "source": [
    "From this we can see that the majority patients that have been admitted in this hospital have an admission type as emergency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "850a9a1f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "850a9a1f",
    "outputId": "15501c96-adf7-452f-c514-09c18bf76968"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>admission_type_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2043</th>\n",
       "      <td>Male</td>\n",
       "      <td>55</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2203</th>\n",
       "      <td>Male</td>\n",
       "      <td>85</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2461</th>\n",
       "      <td>Male</td>\n",
       "      <td>75</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4823</th>\n",
       "      <td>Female</td>\n",
       "      <td>65</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35877</th>\n",
       "      <td>Male</td>\n",
       "      <td>65</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47548</th>\n",
       "      <td>Male</td>\n",
       "      <td>45</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48711</th>\n",
       "      <td>Female</td>\n",
       "      <td>75</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80354</th>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87714</th>\n",
       "      <td>Male</td>\n",
       "      <td>65</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100721</th>\n",
       "      <td>Male</td>\n",
       "      <td>85</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        gender  age admission_type_id\n",
       "2043      Male   55           Newborn\n",
       "2203      Male   85           Newborn\n",
       "2461      Male   75           Newborn\n",
       "4823    Female   65           Newborn\n",
       "35877     Male   65           Newborn\n",
       "47548     Male   45           Newborn\n",
       "48711   Female   75           Newborn\n",
       "80354   Female    5           Newborn\n",
       "87714     Male   65           Newborn\n",
       "100721    Male   85           Newborn"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['admission_type_id']== 'Newborn'][['gender','age','admission_type_id']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e83bbc71",
   "metadata": {
    "id": "e83bbc71"
   },
   "source": [
    "Droppping the category new born because the admission_type_id == newborn and the age and gender corresponding to it gives contradictory information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "72998861",
   "metadata": {
    "id": "72998861"
   },
   "outputs": [],
   "source": [
    "data=data[data['admission_type_id']!='Newborn']\n",
    "#data.drop(data.index[data['admission_type_id'] == 'Newborn'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "45112c26",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "45112c26",
    "outputId": "ca9b7d01-7050-443f-e2da-f9249d706a2e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Emergency        72489\n",
       "Elective         18868\n",
       "Not Available    10396\n",
       "Name: admission_type_id, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['admission_type_id'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98a4237c",
   "metadata": {
    "id": "98a4237c"
   },
   "source": [
    "# discharge_disposition_id "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0f0bef9d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0f0bef9d",
    "outputId": "d07fd6e1-5c8b-48c4-93f4-5e930d1a0883"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([25,  1,  3,  6,  2,  5, 11,  7, 10,  4, 14, 18,  8, 13, 12, 16, 17,\n",
       "       22, 23,  9, 20, 15, 24, 28, 19, 27], dtype=int64)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['discharge_disposition_id'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a70f85c6",
   "metadata": {
    "id": "a70f85c6"
   },
   "source": [
    "Discharge disposition: Integer identifier corresponding to 29 distinct values, for example, discharged to home, expired, and not available\n",
    "discharge_disposition_id description\n",
    "\n",
    "1 Discharged to home\n",
    "\n",
    "2 Discharged/transferred to another short term hospital\n",
    "\n",
    "3 Discharged/transferred to SNF(skilled nursing facility)\n",
    "\n",
    "4 Discharged/transferred to ICF(intermediate care facility)\n",
    "\n",
    "5 Discharged/transferred to another type of inpatient care institution\n",
    "\n",
    "6 Discharged/transferred to home with home health service\n",
    "\n",
    "7 Left AMA(Against Medical Advice.)\n",
    "\n",
    "8 Discharged/transferred to home under care of Home IV provider\n",
    "\n",
    "9 Admitted as an inpatient to this hospital\n",
    "\n",
    "10 Neonate discharged to another hospital for neonatal aftercare\n",
    "\n",
    "11 Expired\n",
    "\n",
    "12 Still patient or expected to return for outpatient services\n",
    "\n",
    "13 Hospice / home\n",
    "\n",
    "14 Hospice / medical facility\n",
    "\n",
    "15 Discharged/transferred within this institution to Medicare approved swing bed\n",
    "\n",
    "16 Discharged/transferred/referred another institution for outpatient services\n",
    "\n",
    "17 Discharged/transferred/referred to this institution for outpatient services\n",
    "\n",
    "18 NULL\n",
    "\n",
    "19 Expired at home. Medicaid only, hospice.\n",
    "\n",
    "20 Expired in a medical facility. Medicaid only, hospice.\n",
    "\n",
    "21 Expired, place unknown. Medicaid only, hospice.\n",
    "\n",
    "22 Discharged/transferred to another rehab fac including rehab units of a hospital .\n",
    "\n",
    "23 Discharged/transferred to a long term care hospital.\n",
    "\n",
    "24 Discharged/transferred to a nursing facility certified under Medicaid but not certified under Medicare.\n",
    "\n",
    "25 Not Mapped\n",
    "\n",
    "26 Unknown/Invalid\n",
    "\n",
    "30 Discharged/transferred to another Type of Health Care Institution not Defined Elsewhere\n",
    "\n",
    "27 Discharged/transferred to a federal health care facility.\n",
    "\n",
    "28 Discharged/transferred/referred to a psychiatric hospital of psychiatric distinct part unit of a hospital\n",
    "\n",
    "29 Discharged/transferred to a Critical Access Hospital (CAH).\n",
    "\n",
    "We can merge several groups over here to reduce the number of categories:\n",
    "\n",
    "1 ---> Discharged to home\n",
    "\n",
    "2/3/4/5/10/16/22/23/24/30/27/28/29 ---> Transferred to another medical facility\n",
    "\n",
    "7 ---> Left AMA(Against Medical Advice.)\n",
    "\n",
    "6/8 ---> Discharged to home with home health service\n",
    "\n",
    "9/12/15/17 ---> Still patient/referred to this institution\n",
    "\n",
    "11/19/20/21 ---> Expired\n",
    "\n",
    "18/25/26 ---> Not Available\n",
    "\n",
    "13/14 ---> Hospice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5fe93faa",
   "metadata": {
    "id": "5fe93faa"
   },
   "outputs": [],
   "source": [
    "data['discharge_disposition_id']=data['discharge_disposition_id'].replace({1:'Discharged to home',\n",
    "                                        2:'Transferred to another medical facility',\n",
    "                                        3:'Transferred to another medical facility',\n",
    "                                        4:'Transferred to another medical facility',\n",
    "                                        5:'Transferred to another medical facility',\n",
    "                                        16:'Transferred to another medical facility',\n",
    "                                        22:'Transferred to another medical facility',\n",
    "                                        23:'Transferred to another medical facility',\n",
    "                                        24:'Transferred to another medical facility',\n",
    "                                        27:'Transferred to another medical facility',\n",
    "                                        28:'Transferred to another medical facility',\n",
    "                                        29:'Transferred to another medical facility',                            \n",
    "                                        6:'Discharged to home with home health service',\n",
    "                                        8:'Discharged to home with home health service',\n",
    "                                        10:'Neonate discharge',\n",
    "                                        7:'Left AMA',\n",
    "                                        9:'Still patient/referred to this institution',\n",
    "                                        12:'Still patient/referred to this institution',\n",
    "                                        15:'Still patient/referred to this institution',\n",
    "                                        17:'Still patient/referred to this institution',\n",
    "                                        11:'Expired',\n",
    "                                        19:'Expired',\n",
    "                                        20:'Expired',\n",
    "                                        21:'Expired',\n",
    "                                        13:'Hospice',\n",
    "                                        14:'Hospice',\n",
    "                                        18:'Not Available',\n",
    "                                        25:'Not Available',\n",
    "                                        26:'Not Available'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "43e915de",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "43e915de",
    "outputId": "48d51c82-74f5-4a71-cb61-61808f9b96b5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Discharged to home                             60226\n",
       "Transferred to another medical facility        20688\n",
       "Discharged to home with home health service    13006\n",
       "Not Available                                   4680\n",
       "Expired                                         1652\n",
       "Hospice                                          771\n",
       "Left AMA                                         623\n",
       "Still patient/referred to this institution       101\n",
       "Neonate discharge                                  6\n",
       "Name: discharge_disposition_id, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.discharge_disposition_id.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f32d674f",
   "metadata": {
    "id": "f32d674f"
   },
   "source": [
    "The patients who have expired should be removed from the system beacuse they will create bias as they will not be readmitted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "291fa087",
   "metadata": {
    "id": "291fa087"
   },
   "outputs": [],
   "source": [
    "data=data[data['discharge_disposition_id']!='Expired']\n",
    "data=data[data['discharge_disposition_id']!='Neonate discharge']\n",
    "data=data[data['discharge_disposition_id']!='Hospice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1c835f6f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1c835f6f",
    "outputId": "4ebba1ce-d472-4feb-dbb0-8e5ea6ae7f5e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Discharged to home                             60226\n",
       "Transferred to another medical facility        20688\n",
       "Discharged to home with home health service    13006\n",
       "Not Available                                   4680\n",
       "Left AMA                                         623\n",
       "Still patient/referred to this institution       101\n",
       "Name: discharge_disposition_id, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.discharge_disposition_id.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "848fcad1",
   "metadata": {
    "id": "848fcad1"
   },
   "source": [
    "# admission_source_id: "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bebcced1",
   "metadata": {
    "id": "bebcced1"
   },
   "source": [
    "\n",
    "Integer identifier corresponding to 17 distinct values, for example, physician referral, emergency room, and transfer from a hospital"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e7b64d3",
   "metadata": {
    "id": "9e7b64d3"
   },
   "source": [
    "1 Physician Referral\n",
    "\n",
    "2 Clinic Referral\n",
    "\n",
    "3 HMO Referral(Health Maintenance Organization)\n",
    "\n",
    "4 Transfer from a hospital\n",
    "\n",
    "5 Transfer from a Skilled Nursing Facility (SNF)\n",
    "\n",
    "6 Transfer from another health care facility\n",
    "\n",
    "7 Emergency Room\n",
    "\n",
    "8 Court/Law Enforcement\n",
    "\n",
    "9 Not Available\n",
    "\n",
    "10 Transfer from critial access hospital\n",
    "\n",
    "11 Normal Delivery\n",
    "\n",
    "12 Premature Delivery\n",
    "\n",
    "13 Sick Baby\n",
    "\n",
    "14 Extramural Birth\n",
    "\n",
    "15 Not Available\n",
    "\n",
    "17 NULL\n",
    "\n",
    "18 Transfer From Another Home Health Agency\n",
    "\n",
    "19 Readmission to Same Home Health Agency\n",
    "\n",
    "20 Not Mapped\n",
    "\n",
    "21 Unknown/Invalid\n",
    "\n",
    "22 Transfer from hospital inpt/same fac reslt in a sep claim\n",
    "\n",
    "23 Born inside this hospital\n",
    "\n",
    "24 Born outside this hospital\n",
    "\n",
    "25 Transfer from Ambulatory Surgery Center\n",
    "\n",
    "26 Transfer from Hospice\n",
    "\n",
    "We can merge several grps over here to reduce the number of categories:\n",
    "1/2/3 ---> Referral\n",
    "\n",
    "4/5/6/10/18/19/25/26/22 ---> Transferred from another health care facility\n",
    "\n",
    "7 ---> Emergency\n",
    "\n",
    "9/15/17/20/21 ---> Not Available\n",
    "\n",
    "8 ---> Court/Law Enforcement\n",
    "\n",
    "Delivery ---> 11/12/14/13/23/24"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5d97223f",
   "metadata": {
    "id": "5d97223f"
   },
   "outputs": [],
   "source": [
    "data['admission_source_id']=data['admission_source_id'].replace({1:'Referral',\n",
    "                                   2:'Referral',\n",
    "                                   3:'Referral',\n",
    "                                   4:'Transferred from another health care facility',\n",
    "                                   5:'Transferred from another health care facility',\n",
    "                                   6:'Transferred from another health care facility',\n",
    "                                   7:'Emergency',                                    \n",
    "                                   10:'Transferred from another health care facility',\n",
    "                                   18:'Transferred from another health care facility',\n",
    "                                   19:'Transferred from another health care facility',\n",
    "                                   25:'Transferred from another health care facility',\n",
    "                                   26:'Transferred from another health care facility',\n",
    "                                   8 :'Emergency',\n",
    "                                   9:'Not Available',\n",
    "                                   15:'Not Available',\n",
    "                                   17:'Not Available',\n",
    "                                   20:'Not Available',\n",
    "                                   21:'Not Available',\n",
    "                                   11:'Delivery',\n",
    "                                   12:'Delivery',\n",
    "                                   13:'Delivery',\n",
    "                                   14:'Delivery',\n",
    "                                   23:'Delivery',\n",
    "                                   22:\"Transferred from another health care facility\",                                    \n",
    "                                   24:'Delivery'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "dc776223",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dc776223",
    "outputId": "ebfee5a1-656c-475f-915f-3f79fa6f649f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Emergency                                        55858\n",
       "Referral                                         30428\n",
       "Not Available                                     6854\n",
       "Transferred from another health care facility     6180\n",
       "Delivery                                             4\n",
       "Name: admission_source_id, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['admission_source_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "980a4508",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "980a4508",
    "outputId": "63557276-fa53-4377-a04d-f79e0fe8b015"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>admission_source_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>83432</th>\n",
       "      <td>Female</td>\n",
       "      <td>75</td>\n",
       "      <td>Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83510</th>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85588</th>\n",
       "      <td>Female</td>\n",
       "      <td>75</td>\n",
       "      <td>Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97384</th>\n",
       "      <td>Male</td>\n",
       "      <td>75</td>\n",
       "      <td>Delivery</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       gender  age admission_source_id\n",
       "83432  Female   75            Delivery\n",
       "83510  Female   25            Delivery\n",
       "85588  Female   75            Delivery\n",
       "97384    Male   75            Delivery"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['admission_source_id']=='Delivery'][['gender','age','admission_source_id']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cb2c79b3",
   "metadata": {
    "id": "cb2c79b3"
   },
   "outputs": [],
   "source": [
    "data=data[data['admission_source_id']!='Delivery']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c2c8e5b3",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c2c8e5b3",
    "outputId": "3555a940-41f5-46eb-b772-516a06f007ea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Emergency                                        55858\n",
       "Referral                                         30428\n",
       "Not Available                                     6854\n",
       "Transferred from another health care facility     6180\n",
       "Name: admission_source_id, dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['admission_source_id'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a095b6d8",
   "metadata": {
    "id": "a095b6d8"
   },
   "source": [
    "# Time in hospital: Integer number of days between admission and discharge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "7051eb71",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "7051eb71",
    "outputId": "2fcf3213-43ca-41b2-f569-b2f1acaaf4f2"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data.time_in_hospital)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a05919a",
   "metadata": {
    "id": "2a05919a"
   },
   "source": [
    "The time in the hospital ranges from 1 day to 14 days."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "200a71c8",
   "metadata": {
    "id": "200a71c8"
   },
   "source": [
    "# payer_code : \n",
    "    \n",
    "Integer identifier corresponding to 23 distinct values, for example, Blue Cross/Blue Shield, Medicare, and self-pay Medical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7b293f78",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7b293f78",
    "outputId": "a2c4859f-fe5b-4cf8-fe80-7ae75701bc78"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MC    52.277505\n",
       "HM    10.336370\n",
       "SP     8.244068\n",
       "BC     7.676778\n",
       "MD     5.793039\n",
       "CP     4.107852\n",
       "UN     4.021090\n",
       "CM     3.130110\n",
       "OG     1.686856\n",
       "PO     0.976074\n",
       "DM     0.909334\n",
       "CH     0.236927\n",
       "WC     0.225248\n",
       "OT     0.153502\n",
       "MP     0.131812\n",
       "SI     0.091768\n",
       "FR     0.001669\n",
       "Name: payer_code, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.payer_code.value_counts(1)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f41169",
   "metadata": {
    "id": "25f41169"
   },
   "source": [
    "Payer code has a significant number (approx. 40% )of missing values and it are not signification w.r.t the patient readmission so we can drop it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "43786559",
   "metadata": {
    "id": "43786559"
   },
   "outputs": [],
   "source": [
    "data.drop(['payer_code'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e68f3dc",
   "metadata": {
    "id": "9e68f3dc"
   },
   "source": [
    "# medical_specialty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e10aa2f8",
   "metadata": {
    "id": "e10aa2f8"
   },
   "source": [
    " Integer identifier of a specialty of the admitting physician, corresponding to 73 distinct values, for example, cardiology, internal medicine, family/general practice, and surgeon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "31d4bbd8",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "31d4bbd8",
    "outputId": "344b90a9-fd9f-4398-aba3-134d0ba5af5d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.medical_specialty.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e9b0e94f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "e9b0e94f",
    "outputId": "aac6d1bd-388d-4c8b-a9f0-8777508352f3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InternalMedicine                    28.063327\n",
       "Emergency/Trauma                    14.627078\n",
       "Family/GeneralPractice              14.295854\n",
       "Cardiology                          10.405946\n",
       "Surgery-General                      6.029061\n",
       "                                      ...    \n",
       "Perinatology                         0.001972\n",
       "Neurophysiology                      0.001972\n",
       "Psychiatry-Addictive                 0.001972\n",
       "Pediatrics-InfectiousDiseases        0.001972\n",
       "Surgery-PlasticwithinHeadandNeck     0.001972\n",
       "Name: medical_specialty, Length: 72, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.medical_specialty.value_counts(1)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77ff14d5",
   "metadata": {
    "id": "77ff14d5"
   },
   "source": [
    "There are 73 unique values here and a 48.8% of values are missing ('?') hence we drop this column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "33eb0fb6",
   "metadata": {
    "id": "33eb0fb6"
   },
   "outputs": [],
   "source": [
    "data.drop(['medical_specialty'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526b5b2c",
   "metadata": {
    "id": "526b5b2c"
   },
   "source": [
    "# num_lab_procedures: Number of lab tests performed during the encounter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "5a4db823",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5a4db823",
    "outputId": "aad9c560-3b86-4fc5-999d-0cdae0b917b6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of lab tests a patient has undergone can range from 1 to 132\n"
     ]
    }
   ],
   "source": [
    "print('The number of lab tests a patient has undergone can range from',data.num_lab_procedures.min(),'to',data.num_lab_procedures.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6f8ccf0",
   "metadata": {
    "id": "a6f8ccf0"
   },
   "source": [
    "# num_procedures: Number of procedures(other than lab tests) performed during the encounter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "3a7cbf1a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3a7cbf1a",
    "outputId": "b5223fca-f8bb-4a35-b985-78eb3e77b840"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    45672\n",
       "1    20246\n",
       "2    12366\n",
       "3     9202\n",
       "6     4799\n",
       "4     4048\n",
       "5     2987\n",
       "Name: num_procedures, dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.num_procedures.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "964a5fa5",
   "metadata": {
    "id": "964a5fa5"
   },
   "source": [
    "No of procedures range from 0 to 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be405a37",
   "metadata": {
    "id": "be405a37"
   },
   "source": [
    "# num_medications: Number of distinct generic names administered during the encounter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "26c1b883",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "26c1b883",
    "outputId": "f37eb0a1-d301-433e-95be-eced8f210baa"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of medications range from a minimum of 1 to maximum of 81\n"
     ]
    }
   ],
   "source": [
    "print('The number of medications range from a minimum of',data.num_medications.min(),'to maximum of',data.num_medications.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d63bb2a",
   "metadata": {
    "id": "2d63bb2a"
   },
   "source": [
    "number_outpatient: Number of outpatient visits of the patient in the year preceding the encounter\n",
    "\n",
    "number_emergency : Number of emergency visits of the patient in the year preceding the encounter\n",
    "\n",
    "number_inpatient: Number of inpatient visits of the patient in the year preceding the encounter\n",
    "\n",
    "Diagnosis1: The primary diagnosis(coded as first three digits of ICD9)\n",
    "\n",
    "Diagnosis2: Secondary diagnosis(coded as first three digits of ICD9)\n",
    "\n",
    "Diagnosis3: Additional secondary diagnosis(coded as first three digits of ICD9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e531d648",
   "metadata": {
    "id": "e531d648"
   },
   "source": [
    "Service utilization: The data contains variables for number of inpatient (admissions), emergency room visits and outpatient visits for a given patient in the previous one year. These are (crude) measures of how much hospital/clinic services a person has used in the past year. We added these three to create a new variable called service utilization (see figure below). The idea was to see which version gives us better results. Granted, we did not apply any special weighting to the three ingredients of service utilization but we wanted to try something simple at this stage. so we combined these features into a new variable called Service utilization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b401093d",
   "metadata": {
    "id": "b401093d"
   },
   "outputs": [],
   "source": [
    "data['service_utilization'] = data['number_outpatient'] + data['number_emergency'] + data['number_inpatient'] #year_visits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3746ba15",
   "metadata": {
    "id": "3746ba15"
   },
   "outputs": [],
   "source": [
    "data.drop(['number_outpatient','number_emergency','number_inpatient'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "8dc042d4",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "8dc042d4",
    "outputId": "243f19f5-bfb9-416e-c32d-616e1e829b16"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>discharge_disposition_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "      <th>num_lab_procedures</th>\n",
       "      <th>num_procedures</th>\n",
       "      <th>num_medications</th>\n",
       "      <th>...</th>\n",
       "      <th>insulin</th>\n",
       "      <th>glyburide-metformin</th>\n",
       "      <th>glipizide-metformin</th>\n",
       "      <th>glimepiride-pioglitazone</th>\n",
       "      <th>metformin-rosiglitazone</th>\n",
       "      <th>metformin-pioglitazone</th>\n",
       "      <th>change</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "      <th>service_utilization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Available</td>\n",
       "      <td>Not Available</td>\n",
       "      <td>Referral</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>15</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>2</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>45</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              race  gender  age admission_type_id discharge_disposition_id  \\\n",
       "0        Caucasian  Female    5     Not Available            Not Available   \n",
       "1        Caucasian  Female   15         Emergency       Discharged to home   \n",
       "2  AfricanAmerican  Female   25         Emergency       Discharged to home   \n",
       "3        Caucasian    Male   35         Emergency       Discharged to home   \n",
       "4        Caucasian    Male   45         Emergency       Discharged to home   \n",
       "\n",
       "  admission_source_id  time_in_hospital  num_lab_procedures  num_procedures  \\\n",
       "0            Referral                 1                  41               0   \n",
       "1           Emergency                 3                  59               0   \n",
       "2           Emergency                 2                  11               5   \n",
       "3           Emergency                 2                  44               1   \n",
       "4           Emergency                 1                  51               0   \n",
       "\n",
       "   num_medications  ... insulin glyburide-metformin glipizide-metformin  \\\n",
       "0                1  ...      No                  No                  No   \n",
       "1               18  ...      Up                  No                  No   \n",
       "2               13  ...      No                  No                  No   \n",
       "3               16  ...      Up                  No                  No   \n",
       "4                8  ...  Steady                  No                  No   \n",
       "\n",
       "   glimepiride-pioglitazone metformin-rosiglitazone metformin-pioglitazone  \\\n",
       "0                        No                      No                     No   \n",
       "1                        No                      No                     No   \n",
       "2                        No                      No                     No   \n",
       "3                        No                      No                     No   \n",
       "4                        No                      No                     No   \n",
       "\n",
       "  change diabetesMed readmitted service_utilization  \n",
       "0     No          No         NO                   0  \n",
       "1     Ch         Yes        >30                   0  \n",
       "2     No         Yes         NO                   3  \n",
       "3     Ch         Yes         NO                   0  \n",
       "4     Ch         Yes         NO                   0  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0343711",
   "metadata": {
    "id": "f0343711"
   },
   "source": [
    "# Diag1, Diag2 and Diag3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5f36a21",
   "metadata": {
    "id": "e5f36a21"
   },
   "source": [
    "Diagnosis 1 (Nominal) : The primary diagnosis (coded as first three digits of ICD9); 848 distinct values\n",
    "Diagnosis 2 (Nominal) : Secondary diagnosis (coded as first three digits of ICD9); 923 distinct values\n",
    "Diagnosis 3 (Nominal) : Additional secondary diagnosis (coded as first three digits of ICD9); 954 distinct values\n",
    "Diabetes:0\n",
    "Circulatory:1\n",
    "Respiratory:2\n",
    "Digestive:3\n",
    "Injury:4\n",
    "Musculoskelet:5\n",
    "Genitourinory:6\n",
    "Neoplasms:7\n",
    "Others:8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "31e0c6f3",
   "metadata": {
    "id": "31e0c6f3"
   },
   "outputs": [],
   "source": [
    "def map_diagnosis(data, cols):\n",
    "    for col in cols:\n",
    "        data.loc[(data[col].str.contains(\"V\")) | (data[col].str.contains(\"E\")), col] = -1\n",
    "        data[col] = data[col].astype(np.float16)\n",
    "\n",
    "    for col in cols:\n",
    "        data[\"temp_diag\"] = np.nan\n",
    "        data.loc[(data[col]>=390) & (data[col]<=459) | (data[col]==785), \"temp_diag\"] = \"Circulatory\"\n",
    "        data.loc[(data[col]>=460) & (data[col]<=519) | (data[col]==786), \"temp_diag\"] = \"Respiratory\"\n",
    "        data.loc[(data[col]>=520) & (data[col]<=579) | (data[col]==787), \"temp_diag\"] = \"Digestive\"\n",
    "        data.loc[(data[col]>=250) & (data[col]<251), \"temp_diag\"] = \"Diabetes\"\n",
    "        data.loc[(data[col]>=800) & (data[col]<=999), \"temp_diag\"] = \"Injury\"\n",
    "        data.loc[(data[col]>=710) & (data[col]<=739), \"temp_diag\"] = \"Muscoloskeletal\"\n",
    "        data.loc[(data[col]>=580) & (data[col]<=629) | (data[col] == 788), \"temp_diag\"] = \"Genitourinary\"\n",
    "        data.loc[(data[col]>=140) & (data[col]<=239), \"temp_diag\"] = \"Neoplasms\"\n",
    "\n",
    "        data[\"temp_diag\"] = data[\"temp_diag\"].fillna(\"Other\")\n",
    "        data[col] = data[\"temp_diag\"]\n",
    "        data = data.drop(\"temp_diag\", axis=1)\n",
    "\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d9d3e3a9",
   "metadata": {
    "id": "d9d3e3a9"
   },
   "outputs": [],
   "source": [
    "df=data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c186b94a",
   "metadata": {
    "id": "c186b94a"
   },
   "outputs": [],
   "source": [
    "df = map_diagnosis(df,[\"diag_1\",\"diag_2\",\"diag_3\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "958a0f3c",
   "metadata": {
    "id": "958a0f3c"
   },
   "source": [
    "Diagnosis” stands for a primary diagnosis with possible values:\n",
    "“circulatory” for icd9: 390–459, 785,\n",
    "“digestive”—icd9: 520–579, 787;\n",
    "“genitourinary”—icd9:580–629, 788,\n",
    "“diabetes”—icd9: 250.xx,\n",
    "“injury” icd9: 800–999,\n",
    "“musculoskeletal”—icd9: 710–739;\n",
    "“neoplasms”—icd9: 140–239,\n",
    "“respiratory” icd9: 460–519,786,\n",
    "“other” otherwise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3e47a9cb",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "3e47a9cb",
    "outputId": "1ab76306-14cf-429d-a774-d9c8f0eb28c8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_diags(col,data):\n",
    "    sns.countplot(x = col, data = data,\n",
    "            order = data[f\"{col}\"].value_counts().index)\n",
    "    plt.xticks(rotation = 90)\n",
    "    plt.title(col)\n",
    "    plt.show()\n",
    "\n",
    "diag_cols = [\"diag_1\",\"diag_2\",\"diag_3\"]\n",
    "\n",
    "for diag in diag_cols:\n",
    "    plot_diags(diag,df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "2217b220",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2217b220",
    "outputId": "2b249bd3-1637-4f3c-d486-c8944672c966"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    29673\n",
       "8    17810\n",
       "1    13932\n",
       "2     9332\n",
       "3     8660\n",
       "4     6848\n",
       "6     5002\n",
       "5     4932\n",
       "7     3131\n",
       "Name: diag_1, dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"diag_1\"] = df[\"diag_1\"].replace({\"Circulatory\":0,\n",
    "                                     \"Respiratory\":1,\n",
    "                                     \"Digestive\":2,\n",
    "                                     \"Diabetes\":3,\n",
    "                                     \"Injury\":4,\n",
    "                                     \"Muscoloskeletal\":5,\n",
    "                                     \"Genitourinary\":6,\n",
    "                                     \"Neoplasms\":7,\n",
    "                                    \"Other\":8})\n",
    "df.diag_1.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "526ad7cc",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "526ad7cc",
    "outputId": "c781c1e9-46c8-4ebe-85c3-01b0fde2b271"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    31150\n",
       "8    26376\n",
       "3    12703\n",
       "1    10388\n",
       "6     8146\n",
       "2     4088\n",
       "4     2382\n",
       "7     2326\n",
       "5     1761\n",
       "Name: diag_2, dtype: int64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"diag_2\"] = df[\"diag_2\"].replace({\"Circulatory\":0,\n",
    "                                     \"Respiratory\":1,\n",
    "                                     \"Digestive\":2,\n",
    "                                     \"Diabetes\":3,\n",
    "                                     \"Injury\":4,\n",
    "                                     \"Muscoloskeletal\":5,\n",
    "                                     \"Genitourinary\":6,\n",
    "                                     \"Neoplasms\":7,\n",
    "                                    \"Other\":8})\n",
    "df.diag_2.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "ec0ae4bd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ec0ae4bd",
    "outputId": "ba3b8383-5f29-4813-dc68-5f030f6f31d1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8    30002\n",
       "0    29592\n",
       "3    16973\n",
       "1     7005\n",
       "6     6436\n",
       "2     3857\n",
       "5     1898\n",
       "4     1896\n",
       "7     1661\n",
       "Name: diag_3, dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"diag_3\"] = df[\"diag_3\"].replace({\"Circulatory\":0,\n",
    "                                     \"Respiratory\":1,\n",
    "                                     \"Digestive\":2,\n",
    "                                     \"Diabetes\":3,\n",
    "                                     \"Injury\":4,\n",
    "                                     \"Muscoloskeletal\":5,\n",
    "                                     \"Genitourinary\":6,\n",
    "                                     \"Neoplasms\":7,\n",
    "                                    \"Other\":8})\n",
    "df.diag_3.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "db8f404d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "db8f404d",
    "outputId": "813a0283-af3b-4034-9f71-8b2ec481c0d8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_diags(col,data):\n",
    "    sns.countplot(x = col, data = data,\n",
    "            order = data[f\"{col}\"].value_counts().index)\n",
    "    plt.xticks(rotation = 90)\n",
    "    plt.title(col)\n",
    "    plt.show()\n",
    "\n",
    "diag_cols = [\"diag_1\",\"diag_2\",\"diag_3\"]\n",
    "\n",
    "for diag in diag_cols:\n",
    "    plot_diags(diag,df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30a393f1",
   "metadata": {
    "id": "30a393f1"
   },
   "source": [
    "# number_diagnoses "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "8be2768e",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8be2768e",
    "outputId": "48baf5ad-7305-45a5-90d3-07e146f8f1f1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9     47803\n",
       "5     11293\n",
       "8     10359\n",
       "7     10212\n",
       "6      9984\n",
       "4      5498\n",
       "3      2822\n",
       "2      1021\n",
       "1       219\n",
       "16       42\n",
       "13       16\n",
       "10       16\n",
       "11       11\n",
       "15       10\n",
       "12        8\n",
       "14        6\n",
       "Name: number_diagnoses, dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['number_diagnoses'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d79d0b9",
   "metadata": {
    "id": "9d79d0b9"
   },
   "source": [
    "# max_glu_serum "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "40bb3c4c",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "40bb3c4c",
    "outputId": "bb46cc45-b80d-4013-a050-0cab4de0f7fa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None    94173\n",
       "Norm     2543\n",
       ">200     1416\n",
       ">300     1188\n",
       "Name: max_glu_serum, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.max_glu_serum.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b897864c",
   "metadata": {
    "id": "b897864c"
   },
   "source": [
    "It indicates the range of the result or if the test was not taken. Values: “>200,” “>300,” “normal,” and “none” if not measured\n",
    "We also reducing Glucose serum test result into categories of Normal(1), Abnormal(2) and Not tested(0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ffff3886",
   "metadata": {
    "id": "ffff3886"
   },
   "outputs": [],
   "source": [
    "df[\"max_glu_serum\"] = df[\"max_glu_serum\"].replace({\">200\":2,\n",
    "                                                        \">300\":2,\n",
    "                                                        \"Norm\":1,\n",
    "                                                        \"None\":0}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "cbceaa47",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cbceaa47",
    "outputId": "eebf7200-21fd-4f9f-de8e-e92e8c99fe4e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    94173\n",
       "2     2604\n",
       "1     2543\n",
       "Name: max_glu_serum, dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.max_glu_serum.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef181cc",
   "metadata": {
    "id": "0ef181cc"
   },
   "source": [
    "# A1Cresult: Indicates the range of the result or if the test was not taken."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a37d91ae",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "a37d91ae",
    "outputId": "534c3a1c-3473-48ff-9cfd-e92fb027f4ea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None    82489\n",
       ">8       8136\n",
       "Norm     4922\n",
       ">7       3773\n",
       "Name: A1Cresult, dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.A1Cresult.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7089a982",
   "metadata": {
    "id": "7089a982"
   },
   "source": [
    "Values: “>8” if the result was greater than 8%\n",
    "\n",
    "    “>7” if the result was greater than 7% but less than 8%\n",
    "\n",
    "    “normal” if the result was less than 7%\n",
    "\n",
    "    “none” if not measured."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1cdebf8",
   "metadata": {
    "id": "b1cdebf8"
   },
   "source": [
    "# features for medications "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d149fb",
   "metadata": {
    "id": "32d149fb"
   },
   "source": [
    "For the generic names : metformin, repaglinide, nateglinide, chlorpropamide, glimepiride, acetohexamide, glipizide, glyburide, tolbutamide, pioglitazone, rosiglitazone, acarbose, miglitol, troglitazone, tolazamide, examide, sitagliptin, insulin, glyburide-metformin, glipizide-metformin, glimepiride-pioglitazone, metformin-rosiglitazone, and metformin-pioglitazone\n",
    "\n",
    "The feature indicates whether the drug was prescribed or there was a change in the dosage.\n",
    "\n",
    "Values: “up” if the dosage was increased during the encounter\n",
    "\n",
    "    “down” if the dosage was decreased\n",
    "\n",
    "    “steady” if the dosage did not change\n",
    "\n",
    "    “no” if the drug was not prescribed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "645d5dc1",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "645d5dc1",
    "outputId": "5de78ca7-93ae-4e67-d17c-bfd47339be58"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>discharge_disposition_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "      <th>num_lab_procedures</th>\n",
       "      <th>num_procedures</th>\n",
       "      <th>num_medications</th>\n",
       "      <th>...</th>\n",
       "      <th>insulin</th>\n",
       "      <th>glyburide-metformin</th>\n",
       "      <th>glipizide-metformin</th>\n",
       "      <th>glimepiride-pioglitazone</th>\n",
       "      <th>metformin-rosiglitazone</th>\n",
       "      <th>metformin-pioglitazone</th>\n",
       "      <th>change</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "      <th>service_utilization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Available</td>\n",
       "      <td>Not Available</td>\n",
       "      <td>Referral</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>15</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>25</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>35</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>2</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>45</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101761</th>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Male</td>\n",
       "      <td>75</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Transferred to another medical facility</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>3</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>Down</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101762</th>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>85</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Transferred to another medical facility</td>\n",
       "      <td>Transferred from another health care facility</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101763</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>75</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>Down</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101764</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>85</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Transferred to another medical facility</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>10</td>\n",
       "      <td>45</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ch</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101765</th>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>75</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>Discharged to home</td>\n",
       "      <td>Emergency</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>99320 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   race  gender  age admission_type_id  \\\n",
       "0             Caucasian  Female    5     Not Available   \n",
       "1             Caucasian  Female   15         Emergency   \n",
       "2       AfricanAmerican  Female   25         Emergency   \n",
       "3             Caucasian    Male   35         Emergency   \n",
       "4             Caucasian    Male   45         Emergency   \n",
       "...                 ...     ...  ...               ...   \n",
       "101761  AfricanAmerican    Male   75         Emergency   \n",
       "101762  AfricanAmerican  Female   85         Emergency   \n",
       "101763        Caucasian    Male   75         Emergency   \n",
       "101764        Caucasian  Female   85         Emergency   \n",
       "101765        Caucasian    Male   75         Emergency   \n",
       "\n",
       "                       discharge_disposition_id  \\\n",
       "0                                 Not Available   \n",
       "1                            Discharged to home   \n",
       "2                            Discharged to home   \n",
       "3                            Discharged to home   \n",
       "4                            Discharged to home   \n",
       "...                                         ...   \n",
       "101761  Transferred to another medical facility   \n",
       "101762  Transferred to another medical facility   \n",
       "101763                       Discharged to home   \n",
       "101764  Transferred to another medical facility   \n",
       "101765                       Discharged to home   \n",
       "\n",
       "                                  admission_source_id  time_in_hospital  \\\n",
       "0                                            Referral                 1   \n",
       "1                                           Emergency                 3   \n",
       "2                                           Emergency                 2   \n",
       "3                                           Emergency                 2   \n",
       "4                                           Emergency                 1   \n",
       "...                                               ...               ...   \n",
       "101761                                      Emergency                 3   \n",
       "101762  Transferred from another health care facility                 5   \n",
       "101763                                      Emergency                 1   \n",
       "101764                                      Emergency                10   \n",
       "101765                                      Emergency                 6   \n",
       "\n",
       "        num_lab_procedures  num_procedures  num_medications  ...  insulin  \\\n",
       "0                       41               0                1  ...       No   \n",
       "1                       59               0               18  ...       Up   \n",
       "2                       11               5               13  ...       No   \n",
       "3                       44               1               16  ...       Up   \n",
       "4                       51               0                8  ...   Steady   \n",
       "...                    ...             ...              ...  ...      ...   \n",
       "101761                  51               0               16  ...     Down   \n",
       "101762                  33               3               18  ...   Steady   \n",
       "101763                  53               0                9  ...     Down   \n",
       "101764                  45               2               21  ...       Up   \n",
       "101765                  13               3                3  ...       No   \n",
       "\n",
       "        glyburide-metformin  glipizide-metformin  glimepiride-pioglitazone  \\\n",
       "0                        No                   No                        No   \n",
       "1                        No                   No                        No   \n",
       "2                        No                   No                        No   \n",
       "3                        No                   No                        No   \n",
       "4                        No                   No                        No   \n",
       "...                     ...                  ...                       ...   \n",
       "101761                   No                   No                        No   \n",
       "101762                   No                   No                        No   \n",
       "101763                   No                   No                        No   \n",
       "101764                   No                   No                        No   \n",
       "101765                   No                   No                        No   \n",
       "\n",
       "        metformin-rosiglitazone metformin-pioglitazone change diabetesMed  \\\n",
       "0                            No                     No     No          No   \n",
       "1                            No                     No     Ch         Yes   \n",
       "2                            No                     No     No         Yes   \n",
       "3                            No                     No     Ch         Yes   \n",
       "4                            No                     No     Ch         Yes   \n",
       "...                         ...                    ...    ...         ...   \n",
       "101761                       No                     No     Ch         Yes   \n",
       "101762                       No                     No     No         Yes   \n",
       "101763                       No                     No     Ch         Yes   \n",
       "101764                       No                     No     Ch         Yes   \n",
       "101765                       No                     No     No          No   \n",
       "\n",
       "       readmitted service_utilization  \n",
       "0              NO                   0  \n",
       "1             >30                   0  \n",
       "2              NO                   3  \n",
       "3              NO                   0  \n",
       "4              NO                   0  \n",
       "...           ...                 ...  \n",
       "101761        >30                   0  \n",
       "101762         NO                   1  \n",
       "101763         NO                   1  \n",
       "101764         NO                   1  \n",
       "101765         NO                   0  \n",
       "\n",
       "[99320 rows x 43 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8dab9fa6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8dab9fa6",
    "outputId": "552da5a0-c942-4493-de9a-862b47f85ae8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['race', 'gender', 'age', 'admission_type_id',\n",
       "       'discharge_disposition_id', 'admission_source_id', 'time_in_hospital',\n",
       "       'num_lab_procedures', 'num_procedures', 'num_medications', 'diag_1',\n",
       "       'diag_2', 'diag_3', 'number_diagnoses', 'max_glu_serum', 'A1Cresult',\n",
       "       'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',\n",
       "       'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',\n",
       "       'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',\n",
       "       'tolazamide', 'examide', 'citoglipton', 'insulin',\n",
       "       'glyburide-metformin', 'glipizide-metformin',\n",
       "       'glimepiride-pioglitazone', 'metformin-rosiglitazone',\n",
       "       'metformin-pioglitazone', 'change', 'diabetesMed', 'readmitted',\n",
       "       'service_utilization'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "787d2554",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "787d2554",
    "outputId": "41d8f1ab-611a-414c-da24-66f0b01891e8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metformin ['No' 'Steady' 'Up' 'Down']\n",
      "repaglinide ['No' 'Up' 'Steady' 'Down']\n",
      "nateglinide ['No' 'Steady' 'Down' 'Up']\n",
      "chlorpropamide ['No' 'Steady' 'Down' 'Up']\n",
      "glimepiride ['No' 'Steady' 'Down' 'Up']\n",
      "acetohexamide ['No' 'Steady']\n",
      "glipizide ['No' 'Steady' 'Up' 'Down']\n",
      "glyburide ['No' 'Steady' 'Up' 'Down']\n",
      "tolbutamide ['No' 'Steady']\n",
      "pioglitazone ['No' 'Steady' 'Up' 'Down']\n",
      "rosiglitazone ['No' 'Steady' 'Up' 'Down']\n",
      "acarbose ['No' 'Steady' 'Up' 'Down']\n",
      "miglitol ['No' 'Steady' 'Down' 'Up']\n",
      "troglitazone ['No' 'Steady']\n",
      "tolazamide ['No' 'Steady' 'Up']\n",
      "examide ['No']\n",
      "citoglipton ['No']\n",
      "insulin ['No' 'Up' 'Steady' 'Down']\n",
      "glyburide-metformin ['No' 'Steady' 'Down' 'Up']\n",
      "glipizide-metformin ['No' 'Steady']\n",
      "glimepiride-pioglitazone ['No' 'Steady']\n",
      "metformin-rosiglitazone ['No' 'Steady']\n",
      "metformin-pioglitazone ['No' 'Steady']\n"
     ]
    }
   ],
   "source": [
    "meds = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',\n",
    "       'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',\n",
    "       'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',\n",
    "       'tolazamide', 'examide', 'citoglipton', 'insulin',\n",
    "       'glyburide-metformin', 'glipizide-metformin',\n",
    "       'glimepiride-pioglitazone', 'metformin-rosiglitazone',\n",
    "       'metformin-pioglitazone']\n",
    "\n",
    "for i in meds:\n",
    "       print(i, df[i].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "77634ada",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "77634ada",
    "outputId": "75fe8741-efb8-4b61-8351-be4b3aba0c02"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['metformin',\n",
       " 'repaglinide',\n",
       " 'nateglinide',\n",
       " 'chlorpropamide',\n",
       " 'glimepiride',\n",
       " 'acetohexamide',\n",
       " 'glipizide',\n",
       " 'glyburide',\n",
       " 'tolbutamide',\n",
       " 'pioglitazone',\n",
       " 'rosiglitazone',\n",
       " 'acarbose',\n",
       " 'miglitol',\n",
       " 'troglitazone',\n",
       " 'tolazamide',\n",
       " 'examide',\n",
       " 'citoglipton',\n",
       " 'insulin',\n",
       " 'glyburide-metformin',\n",
       " 'glipizide-metformin',\n",
       " 'glimepiride-pioglitazone',\n",
       " 'metformin-rosiglitazone',\n",
       " 'metformin-pioglitazone']"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meds=list(df.iloc[:,16:39].columns)\n",
    "meds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "f5b78928",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "f5b78928",
    "outputId": "924ec04e-ff42-4c00-922d-806be166c69c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metformin\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "repaglinide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nateglinide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "chlorpropamide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glimepiride\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "acetohexamide\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glipizide\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glyburide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tolbutamide\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pioglitazone\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rosiglitazone\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "acarbose\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "miglitol\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "troglitazone\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tolazamide\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "examide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "citoglipton\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "insulin\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glyburide-metformin\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glipizide-metformin\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glimepiride-pioglitazone\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metformin-rosiglitazone\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metformin-pioglitazone\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in meds:\n",
    "    print(i)\n",
    "    print(sns.countplot(df[i]))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "982efcf5",
   "metadata": {
    "id": "982efcf5"
   },
   "outputs": [],
   "source": [
    "l1=['metformin','glipizide','insulin','glyburide']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "04d95377",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 0
    },
    "id": "04d95377",
    "outputId": "3c42585e-727e-4672-8c45-c3f648f2b442"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metformin\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glipizide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "insulin\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glyburide\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in l1:\n",
    "    print(i)\n",
    "    print(sns.countplot(df[i]))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "b8b04808",
   "metadata": {
    "id": "b8b04808"
   },
   "outputs": [],
   "source": [
    "for i in l1:\n",
    "    df[i]=df[i].apply(lambda x: 0 if (x== 'No' or x=='Steady') else 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "9a63a8d7",
   "metadata": {
    "id": "9a63a8d7"
   },
   "outputs": [],
   "source": [
    "df=df.drop(['repaglinide',\n",
    " 'nateglinide',\n",
    " 'chlorpropamide',\n",
    " 'glimepiride',\n",
    " 'acetohexamide',\n",
    " 'tolbutamide',\n",
    " 'pioglitazone',\n",
    " 'rosiglitazone',\n",
    " 'acarbose',\n",
    " 'miglitol',\n",
    " 'troglitazone',\n",
    " 'tolazamide',\n",
    " 'glyburide-metformin',\n",
    " 'glipizide-metformin',\n",
    " 'glimepiride-pioglitazone',\n",
    " 'metformin-rosiglitazone',\n",
    " 'metformin-pioglitazone'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8882cd0b",
   "metadata": {
    "id": "8882cd0b"
   },
   "outputs": [],
   "source": [
    "# We can drop examide, citoglipton and metformin-rosiglitazone as it is not prescribed to any patient.\n",
    "df.drop(['examide', 'citoglipton'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "219a5b10",
   "metadata": {
    "id": "219a5b10"
   },
   "source": [
    "# change : Indicates if there was a change in diabetic medications (either dosage or generic name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4be4d845",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4be4d845",
    "outputId": "5d5c8441-bfcf-4830-e302-d59193707c7a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No    53205\n",
       "Ch    46115\n",
       "Name: change, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.change.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "36e6cd51",
   "metadata": {
    "id": "36e6cd51"
   },
   "outputs": [],
   "source": [
    "df['change'] = df['change'].replace({'No' : 0, 'Ch' : 1})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ec73e55",
   "metadata": {
    "id": "1ec73e55"
   },
   "source": [
    "# diabetesMed : Indicates if there was any diabetic medication prescribed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "58b20cff",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "58b20cff",
    "outputId": "a38e77b4-ff3c-439c-8ad1-f1fbefaa7fcf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Yes    76701\n",
       "No     22619\n",
       "Name: diabetesMed, dtype: int64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.diabetesMed.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "9b5b05f9",
   "metadata": {
    "id": "9b5b05f9"
   },
   "outputs": [],
   "source": [
    "df['diabetesMed'] = df['diabetesMed'].replace({'Yes' : 1, 'No' : 0})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2051ef08",
   "metadata": {
    "id": "2051ef08"
   },
   "source": [
    "# readmitted: Outcome variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "da469161",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "da469161",
    "outputId": "b66a2bc7-77d5-42e1-9607-8651cdf78524"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NO     52511\n",
       ">30    35496\n",
       "<30    11313\n",
       "Name: readmitted, dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.readmitted.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "cf530b21",
   "metadata": {
    "id": "cf530b21"
   },
   "outputs": [],
   "source": [
    "df['readmitted'] = df['readmitted'].replace('>30', 'NO')\n",
    "df['readmitted']= df['readmitted'].replace( {'NO': 0, '<30': 1} ).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "9a72bd92",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9a72bd92",
    "outputId": "f0d9e192-2c37-400d-8fbf-cc552776f614"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99320, 24)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12c8f748",
   "metadata": {
    "id": "12c8f748"
   },
   "source": [
    "# Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "2abcbd64",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2abcbd64",
    "outputId": "1c43b2ac-893c-481b-d48e-ef57925b3b80"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['race', 'gender', 'age', 'admission_type_id',\n",
       "       'discharge_disposition_id', 'admission_source_id', 'time_in_hospital',\n",
       "       'num_lab_procedures', 'num_procedures', 'num_medications', 'diag_1',\n",
       "       'diag_2', 'diag_3', 'number_diagnoses', 'max_glu_serum', 'A1Cresult',\n",
       "       'metformin', 'glipizide', 'glyburide', 'insulin', 'change',\n",
       "       'diabetesMed', 'readmitted', 'service_utilization'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "d29c5659",
   "metadata": {
    "id": "d29c5659"
   },
   "outputs": [],
   "source": [
    "df['admission_source_id']=df['admission_source_id'].replace({'Emergency':0,'Referral':1,\n",
    "                                                             'Not Available':2,'Transferred from another health care facility':3})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "16f1038d",
   "metadata": {
    "id": "16f1038d"
   },
   "outputs": [],
   "source": [
    "df['discharge_disposition_id']=df['discharge_disposition_id'].replace({'Discharged to home':0,'Transferred to another medical facility':1,\n",
    "                                                                       'Not Available':2,'Left AMA':3,'Discharged to home with home health service':5,\n",
    "                                                                       'Still patient/referred to this institution':4})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "60426c0c",
   "metadata": {
    "id": "60426c0c"
   },
   "outputs": [],
   "source": [
    "\n",
    "df['admission_type_id']=df['admission_type_id'].replace({'Emergency':0,'Elective':1,'Not Available':2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "225b8285",
   "metadata": {
    "id": "225b8285"
   },
   "outputs": [],
   "source": [
    "df['A1Cresult']=df['A1Cresult'].replace({'None' :0,'>7':2, '>8':2, 'Norm':1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "33b66a7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['gender']=df['gender'].replace({'Female':0,'Male':1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "4300e085",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['race']=df['race'].replace({\"Caucasian\":1,'AfricanAmerican':2,'Other':0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "493496b8",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 488
    },
    "id": "493496b8",
    "outputId": "e0af6ba2-b1a2-45bb-dcb1-b71c9e460154"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>discharge_disposition_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "      <th>num_lab_procedures</th>\n",
       "      <th>num_procedures</th>\n",
       "      <th>num_medications</th>\n",
       "      <th>...</th>\n",
       "      <th>max_glu_serum</th>\n",
       "      <th>A1Cresult</th>\n",
       "      <th>metformin</th>\n",
       "      <th>glipizide</th>\n",
       "      <th>glyburide</th>\n",
       "      <th>insulin</th>\n",
       "      <th>change</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "      <th>service_utilization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101761</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101762</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>85</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101763</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101764</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>85</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>45</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101765</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>99320 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        race  gender  age  admission_type_id  discharge_disposition_id  \\\n",
       "0          1       0    5                  2                         2   \n",
       "1          1       0   15                  0                         0   \n",
       "2          2       0   25                  0                         0   \n",
       "3          1       1   35                  0                         0   \n",
       "4          1       1   45                  0                         0   \n",
       "...      ...     ...  ...                ...                       ...   \n",
       "101761     2       1   75                  0                         1   \n",
       "101762     2       0   85                  0                         1   \n",
       "101763     1       1   75                  0                         0   \n",
       "101764     1       0   85                  0                         1   \n",
       "101765     1       1   75                  0                         0   \n",
       "\n",
       "        admission_source_id  time_in_hospital  num_lab_procedures  \\\n",
       "0                         1                 1                  41   \n",
       "1                         0                 3                  59   \n",
       "2                         0                 2                  11   \n",
       "3                         0                 2                  44   \n",
       "4                         0                 1                  51   \n",
       "...                     ...               ...                 ...   \n",
       "101761                    0                 3                  51   \n",
       "101762                    3                 5                  33   \n",
       "101763                    0                 1                  53   \n",
       "101764                    0                10                  45   \n",
       "101765                    0                 6                  13   \n",
       "\n",
       "        num_procedures  num_medications  ...  max_glu_serum  A1Cresult  \\\n",
       "0                    0                1  ...              0          0   \n",
       "1                    0               18  ...              0          0   \n",
       "2                    5               13  ...              0          0   \n",
       "3                    1               16  ...              0          0   \n",
       "4                    0                8  ...              0          0   \n",
       "...                ...              ...  ...            ...        ...   \n",
       "101761               0               16  ...              0          2   \n",
       "101762               3               18  ...              0          0   \n",
       "101763               0                9  ...              0          0   \n",
       "101764               2               21  ...              0          0   \n",
       "101765               3                3  ...              0          0   \n",
       "\n",
       "        metformin  glipizide  glyburide  insulin  change  diabetesMed  \\\n",
       "0               0          0          0        0       0            0   \n",
       "1               0          0          0        1       1            1   \n",
       "2               0          0          0        0       0            1   \n",
       "3               0          0          0        1       1            1   \n",
       "4               0          0          0        0       1            1   \n",
       "...           ...        ...        ...      ...     ...          ...   \n",
       "101761          0          0          0        1       1            1   \n",
       "101762          0          0          0        0       0            1   \n",
       "101763          0          0          0        1       1            1   \n",
       "101764          0          0          0        1       1            1   \n",
       "101765          0          0          0        0       0            0   \n",
       "\n",
       "        readmitted  service_utilization  \n",
       "0                0                    0  \n",
       "1                0                    0  \n",
       "2                0                    3  \n",
       "3                0                    0  \n",
       "4                0                    0  \n",
       "...            ...                  ...  \n",
       "101761           0                    0  \n",
       "101762           0                    1  \n",
       "101763           0                    1  \n",
       "101764           0                    1  \n",
       "101765           0                    0  \n",
       "\n",
       "[99320 rows x 24 columns]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "c89b1a82",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c89b1a82",
    "outputId": "d738ef5f-82d2-4da1-b10c-2dd649e383ef"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "race\n",
      "[1 2 0]\n",
      "gender\n",
      "[0 1]\n",
      "age\n",
      "[ 5 15 25 35 45 55 65 75 85 95]\n",
      "admission_type_id\n",
      "[2 0 1]\n",
      "discharge_disposition_id\n",
      "[2 0 1 5 3 4]\n",
      "admission_source_id\n",
      "[1 0 3 2]\n",
      "time_in_hospital\n",
      "[ 1  3  2  4  5 13 12  9  7 10  6 11  8 14]\n",
      "num_lab_procedures:118unique values\n",
      "num_procedures\n",
      "[0 5 1 6 2 3 4]\n",
      "num_medications:75unique values\n",
      "diag_1\n",
      "[3 8 7 0 1 4 5 2 6]\n",
      "diag_2\n",
      "[8 3 7 0 1 4 5 6 2]\n",
      "diag_3\n",
      "[8 0 3 1 4 7 6 5 2]\n",
      "number_diagnoses\n",
      "[ 1  9  6  7  5  8  3  4  2 16 12 13 15 10 11 14]\n",
      "max_glu_serum\n",
      "[0 2 1]\n",
      "A1Cresult\n",
      "[0 2 1]\n",
      "metformin\n",
      "[0 1]\n",
      "glipizide\n",
      "[0 1]\n",
      "glyburide\n",
      "[0 1]\n",
      "insulin\n",
      "[0 1]\n",
      "change\n",
      "[0 1]\n",
      "diabetesMed\n",
      "[0 1]\n",
      "readmitted\n",
      "[0 1]\n",
      "service_utilization:47unique values\n"
     ]
    }
   ],
   "source": [
    "# for each column\n",
    "for c in list(df.columns):\n",
    "    #  get a list of unique values\n",
    "    n=df[c].unique()\n",
    "    # if the number of unique values is less than 30 print values ,otherwise print the number of unoque values\n",
    "    if len(n)<30:\n",
    "        print(c)\n",
    "        print(n)\n",
    "    else:\n",
    "        print(c+':'+str(len(n))+'unique values')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "175fc89f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "175fc89f",
    "outputId": "e5ccd8d7-bf00-43ae-ee30-4241dbd08e84"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2880x2880 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr=df.corr()\n",
    "fig, ax = plt.subplots(figsize=(40, 40))\n",
    "sns.heatmap(corr, annot=True)           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "f288a593",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f288a593",
    "outputId": "10b7ef47-3f4c-4c72-d839-81abec74cbc2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99320, 24)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "b9b832be",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "b9b832be",
    "outputId": "5aa68bc6-4313-4f65-cedf-6a76fefeffa8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['race', 'gender', 'age', 'admission_type_id',\n",
       "       'discharge_disposition_id', 'admission_source_id', 'time_in_hospital',\n",
       "       'num_lab_procedures', 'num_procedures', 'num_medications', 'diag_1',\n",
       "       'diag_2', 'diag_3', 'number_diagnoses', 'max_glu_serum', 'A1Cresult',\n",
       "       'metformin', 'glipizide', 'glyburide', 'insulin', 'change',\n",
       "       'diabetesMed', 'readmitted', 'service_utilization'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "b78c153a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "b78c153a",
    "outputId": "030a7273-1e66-4728-9116-541f3e13ccd3"
   },
   "outputs": [],
   "source": [
    "df.drop(['race','num_procedures','diag_1','diag_2','diag_3', 'max_glu_serum', 'A1Cresult',\"num_lab_procedures\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "69fbf398",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gender', 'age', 'admission_type_id', 'discharge_disposition_id',\n",
       "       'admission_source_id', 'time_in_hospital', 'num_medications',\n",
       "       'number_diagnoses', 'metformin', 'glipizide', 'glyburide', 'insulin',\n",
       "       'change', 'diabetesMed', 'readmitted', 'service_utilization'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1CufpgSmX9Tk",
   "metadata": {
    "id": "1CufpgSmX9Tk"
   },
   "source": [
    "We have 1lakh records in our dataset. we are randomly sampling it to 50% of original dataset for improving the speed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "OfymGtm-Ysw-",
   "metadata": {
    "id": "OfymGtm-Ysw-"
   },
   "outputs": [],
   "source": [
    "df = df.sample(frac=0.5, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "6bc56085",
   "metadata": {
    "id": "6bc56085"
   },
   "outputs": [],
   "source": [
    "X = df.drop('readmitted',axis=1)\n",
    "y = df['readmitted']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "6923595f",
   "metadata": {
    "id": "6923595f"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "min_max =MinMaxScaler()\n",
    "X = min_max.fit_transform(X)\n",
    "X = pd.DataFrame(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "7ade40f2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 394
    },
    "id": "7ade40f2",
    "outputId": "a2168fcf-1ca8-47d9-a58d-2b1c92d925d1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "      <td>49660.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.459746</td>\n",
       "      <td>0.674844</td>\n",
       "      <td>0.195006</td>\n",
       "      <td>0.197241</td>\n",
       "      <td>0.208458</td>\n",
       "      <td>0.260098</td>\n",
       "      <td>0.192257</td>\n",
       "      <td>0.426320</td>\n",
       "      <td>0.016573</td>\n",
       "      <td>0.013311</td>\n",
       "      <td>0.013492</td>\n",
       "      <td>0.230648</td>\n",
       "      <td>0.463693</td>\n",
       "      <td>0.773681</td>\n",
       "      <td>0.015083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.498382</td>\n",
       "      <td>0.177163</td>\n",
       "      <td>0.331710</td>\n",
       "      <td>0.333925</td>\n",
       "      <td>0.286193</td>\n",
       "      <td>0.228740</td>\n",
       "      <td>0.103733</td>\n",
       "      <td>0.129558</td>\n",
       "      <td>0.127665</td>\n",
       "      <td>0.114602</td>\n",
       "      <td>0.115369</td>\n",
       "      <td>0.421252</td>\n",
       "      <td>0.498685</td>\n",
       "      <td>0.418452</td>\n",
       "      <td>0.028977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.115385</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.179487</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>0.243590</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.025000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0             1             2             3             4   \\\n",
       "count  49660.000000  49660.000000  49660.000000  49660.000000  49660.000000   \n",
       "mean       0.459746      0.674844      0.195006      0.197241      0.208458   \n",
       "std        0.498382      0.177163      0.331710      0.333925      0.286193   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.555556      0.000000      0.000000      0.000000   \n",
       "50%        0.000000      0.666667      0.000000      0.000000      0.000000   \n",
       "75%        1.000000      0.777778      0.500000      0.200000      0.333333   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "                 5             6             7             8             9   \\\n",
       "count  49660.000000  49660.000000  49660.000000  49660.000000  49660.000000   \n",
       "mean       0.260098      0.192257      0.426320      0.016573      0.013311   \n",
       "std        0.228740      0.103733      0.129558      0.127665      0.114602   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.076923      0.115385      0.333333      0.000000      0.000000   \n",
       "50%        0.230769      0.179487      0.466667      0.000000      0.000000   \n",
       "75%        0.384615      0.243590      0.533333      0.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "                 10            11            12            13            14  \n",
       "count  49660.000000  49660.000000  49660.000000  49660.000000  49660.000000  \n",
       "mean       0.013492      0.230648      0.463693      0.773681      0.015083  \n",
       "std        0.115369      0.421252      0.498685      0.418452      0.028977  \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000  \n",
       "25%        0.000000      0.000000      0.000000      1.000000      0.000000  \n",
       "50%        0.000000      0.000000      0.000000      1.000000      0.000000  \n",
       "75%        0.000000      0.000000      1.000000      1.000000      0.025000  \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "a8920f24",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "a8920f24",
    "outputId": "c5cadc28-7a40-478c-eb31-08dada7dc979"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.88377\n",
       "1    0.11623\n",
       "Name: readmitted, dtype: float64"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cf64563",
   "metadata": {
    "id": "0cf64563"
   },
   "source": [
    "# Machine Learning Algorithms¶"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a5d76864",
   "metadata": {
    "id": "a5d76864"
   },
   "outputs": [],
   "source": [
    "#machine learning packages (sklearn + xgboost)\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\n",
    "from warnings import filterwarnings\n",
    "filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "1d8dc53b",
   "metadata": {
    "id": "1d8dc53b"
   },
   "outputs": [],
   "source": [
    "#SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "6038772f",
   "metadata": {
    "id": "6038772f"
   },
   "outputs": [],
   "source": [
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "smote = SMOTE()\n",
    "X_up, y_up = smote.fit_resample(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "73fb4d45",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "73fb4d45",
    "outputId": "f2c6be0f-431f-4449-e523-a1f5567c24ac"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.5\n",
       "1    0.5\n",
       "Name: readmitted, dtype: float64"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking target column to make sure its balanced\n",
    "\n",
    "y_up.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "0fafded0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "id": "0fafded0",
    "outputId": "e05745d8-bb43-4866-d013-3b3c627379d1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6, 4))\n",
    "sns.countplot(x=y_up)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "ae9833c2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ae9833c2",
    "outputId": "468a0275-28f0-4dfb-d98a-ef9c7e7f9259"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train:  (65832, 15)\n",
      "Shape of X_test:  (21944, 15)\n",
      "Shape of y_train:  (65832,)\n",
      "Shape of y_test:  (21944,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_up, y_up, random_state=42, test_size=0.25)\n",
    "\n",
    "print('Shape of X_train: ',X_train.shape)\n",
    "print('Shape of X_test: ',X_test.shape)\n",
    "print('Shape of y_train: ',y_train.shape)\n",
    "print('Shape of y_test: ',y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "aa4a6800",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('cleaned_diabetic_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "dea3607b",
   "metadata": {
    "id": "dea3607b"
   },
   "outputs": [],
   "source": [
    "# importing necessary libraries to get the test results\n",
    "\n",
    "from sklearn.metrics import accuracy_score, f1_score,precision_score,recall_score, classification_report\n",
    "\n",
    "#to get a consolidated test result:\n",
    "results = {'Classification Model':[],'Accuracy':[], 'F1 Score':[]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "80ce1255",
   "metadata": {
    "id": "80ce1255"
   },
   "outputs": [],
   "source": [
    "# Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "c332fb8e",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c332fb8e",
    "outputId": "c06f8ec6-e6f2-4282-c746-16f5f244f441"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: LogisticRegression\n",
      "Accuracy Score:  0.5947\n",
      "F1 Score:  0.5783\n",
      "Precision Score:  0.603\n",
      "Recall Score:  0.5555\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.59      0.63      0.61     10966\n",
      "           1       0.60      0.56      0.58     10978\n",
      "\n",
      "    accuracy                           0.59     21944\n",
      "   macro avg       0.60      0.59      0.59     21944\n",
      "weighted avg       0.60      0.59      0.59     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "clf = LogisticRegression()\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "print('Accuracy Score: ',accuracy_score(y_test, y_pred).round(4))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Precision Score: ',precision_score(y_test, y_pred).round(4))\n",
    "print('Recall Score: ',recall_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='binary').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "55R4IeiyZK9O",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "id": "55R4IeiyZK9O",
    "outputId": "1ed77a83-373a-4896-a356-4360a81424ab"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#kNN\n",
    "\n",
    "# Finding the optimum k value\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "values=[]\n",
    "neighbors=np.arange(1,10)\n",
    "for k in neighbors:\n",
    "    clf=KNeighborsClassifier(n_neighbors=k, metric='minkowski')\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred=clf.predict(X_test)\n",
    "    score=accuracy_score(y_test, y_pred)\n",
    "    values.append(score)\n",
    "    \n",
    "# plotting k vs accuracy_score to get optimum k\n",
    "plt.plot(neighbors, values, 'o-')\n",
    "plt.title('accuracy_score vs k')\n",
    "plt.xticks(np.arange(0.0, 11.0, 1.0))\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('accuracy_score')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "VDekUwP4b6KM",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "VDekUwP4b6KM",
    "outputId": "214758f1-b6eb-46bd-ff52-68642aeec317"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: KNeighborsClassifier\n",
      "F1 Score:  0.8393\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84     10966\n",
      "           1       0.85      0.83      0.84     10978\n",
      "\n",
      "    accuracy                           0.84     21944\n",
      "   macro avg       0.84      0.84      0.84     21944\n",
      "weighted avg       0.84      0.84      0.84     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# performing test with k=2\n",
    "\n",
    "clf=KNeighborsClassifier(n_neighbors=2, metric='minkowski')\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='macro').round(4))\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='macro').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "e5c16df2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "e5c16df2",
    "outputId": "332d9b45-0821-4c48-f54f-d0a2d2eeabf8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: DecisionTreeClassifier\n",
      "Accuracy Score:  0.865\n",
      "F1 Score:  0.8658\n",
      "Precision Score:  0.8609\n",
      "Recall Score:  0.8707\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.86      0.86     10966\n",
      "           1       0.86      0.87      0.87     10978\n",
      "\n",
      "    accuracy                           0.86     21944\n",
      "   macro avg       0.87      0.86      0.86     21944\n",
      "weighted avg       0.87      0.86      0.86     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Decision Tree\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "clf = DecisionTreeClassifier()\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "print('Accuracy Score: ',accuracy_score(y_test, y_pred).round(4))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Precision Score: ',precision_score(y_test, y_pred).round(4))\n",
    "print('Recall Score: ',recall_score(y_test, y_pred, average='binary').round(4))\n",
    "\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='binary').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "6c10ba07",
   "metadata": {
    "id": "6c10ba07"
   },
   "outputs": [],
   "source": [
    "#Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ea4fcd8f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ea4fcd8f",
    "outputId": "0c805e02-bd85-40ac-c787-fccde51d5281"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: RandomForestClassifier\n",
      "Accuracy Score:  0.9213\n",
      "F1 Score:  0.9181\n",
      "Precision Score:  0.9587\n",
      "Recall Score:  0.8807\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.96      0.92     10966\n",
      "           1       0.96      0.88      0.92     10978\n",
      "\n",
      "    accuracy                           0.92     21944\n",
      "   macro avg       0.92      0.92      0.92     21944\n",
      "weighted avg       0.92      0.92      0.92     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "clf = RandomForestClassifier()\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "print('Accuracy Score: ',accuracy_score(y_test, y_pred).round(4))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Precision Score: ',precision_score(y_test, y_pred).round(4))\n",
    "\n",
    "print('Recall Score: ',recall_score(y_test, y_pred, average='binary').round(4))\n",
    "\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='binary').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "20ca5f65",
   "metadata": {
    "id": "20ca5f65"
   },
   "outputs": [],
   "source": [
    "#Gradient Boosting Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "71d08f46",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "71d08f46",
    "outputId": "630b17da-ce30-4365-eb80-fb5649d58ccb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: GradientBoostingClassifier\n",
      "Accuracy Score:  0.88\n",
      "F1 Score:  0.8688\n",
      "Precision Score:  0.9588\n",
      "Recall Score:  0.7942\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.97      0.89     10966\n",
      "           1       0.96      0.79      0.87     10978\n",
      "\n",
      "    accuracy                           0.88     21944\n",
      "   macro avg       0.89      0.88      0.88     21944\n",
      "weighted avg       0.89      0.88      0.88     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "clf = GradientBoostingClassifier()\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "\n",
    "print('Accuracy Score: ',accuracy_score(y_test, y_pred).round(4))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Precision Score: ',precision_score(y_test, y_pred).round(4))\n",
    "print('Recall Score: ',recall_score(y_test, y_pred, average='binary').round(4))\n",
    "\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='binary').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "8099546d",
   "metadata": {
    "id": "8099546d"
   },
   "outputs": [],
   "source": [
    "#Xtreme Gradient Boosting Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "5833bc3a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5833bc3a",
    "outputId": "85d1adb2-9122-4236-c9c6-d1ea46a71c6f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Model: XGBClassifier\n",
      "Accuracy Score:  0.9297\n",
      "F1 Score:  0.9246\n",
      "Precision Score:  0.997\n",
      "Recall Score:  0.862\n",
      "Classification Report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      1.00      0.93     10966\n",
      "           1       1.00      0.86      0.92     10978\n",
      "\n",
      "    accuracy                           0.93     21944\n",
      "   macro avg       0.94      0.93      0.93     21944\n",
      "weighted avg       0.94      0.93      0.93     21944\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import xgboost as xgb\n",
    "\n",
    "clf = xgb.XGBClassifier(use_label_encoder =False)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print('Classification Model: {}'.format(clf.__class__.__name__))\n",
    "print('Accuracy Score: ',accuracy_score(y_test, y_pred).round(4))\n",
    "print('F1 Score: ',f1_score(y_test, y_pred, average='binary').round(4))\n",
    "print('Precision Score: ',precision_score(y_test, y_pred).round(4))\n",
    "\n",
    "print('Recall Score: ',recall_score(y_test, y_pred, average='binary').round(4))\n",
    "\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))\n",
    "\n",
    "if clf.__class__.__name__ not in results['Classification Model']:\n",
    "    results['Classification Model'].append(clf.__class__.__name__)\n",
    "    results['Accuracy'].append(accuracy_score(y_test, y_pred).round(4))\n",
    "    results['F1 Score'].append(f1_score(y_test, y_pred, average='binary').round(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "d9a3a2ed",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 237
    },
    "id": "d9a3a2ed",
    "outputId": "d5205c91-ef6f-4e23-be93-0084994939a6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Classification Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>F1 Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.5947</td>\n",
       "      <td>0.5783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.8394</td>\n",
       "      <td>0.8393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.8650</td>\n",
       "      <td>0.8658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RandomForestClassifier</td>\n",
       "      <td>0.9213</td>\n",
       "      <td>0.9181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GradientBoostingClassifier</td>\n",
       "      <td>0.8800</td>\n",
       "      <td>0.8688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.9297</td>\n",
       "      <td>0.9246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Classification Model  Accuracy  F1 Score\n",
       "0          LogisticRegression    0.5947    0.5783\n",
       "1        KNeighborsClassifier    0.8394    0.8393\n",
       "2      DecisionTreeClassifier    0.8650    0.8658\n",
       "3      RandomForestClassifier    0.9213    0.9181\n",
       "4  GradientBoostingClassifier    0.8800    0.8688\n",
       "5               XGBClassifier    0.9297    0.9246"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Consolidated Result:\n",
    "\n",
    "ConResult = pd.DataFrame(results)\n",
    "ConResult"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "yJaUmDgAgZlT",
   "metadata": {
    "id": "yJaUmDgAgZlT"
   },
   "source": [
    "Random Forest Classifier is giving highest accuracy and precision. So we are selecting this model and trying to fine tune the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "826b53c8",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "826b53c8",
    "outputId": "05c1ab2b-58e0-444f-bfe5-9d4f2f479bd0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'n_estimators': 100, 'min_samples_leaf': 10, 'max_features': 'sqrt', 'max_depth': 8, 'bootstrap': False}\n",
      "f1 Score:  0.7748184173968368\n"
     ]
    }
   ],
   "source": [
    "#from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "param_grid1 = {\n",
    "    'n_estimators': [50, 100, 500, 1000, 1500],\n",
    "    'max_depth': range(2,11,2),\n",
    "    'min_samples_leaf': [1, 5, 10],\n",
    "    'max_features': ['auto', 'sqrt'],\n",
    "    'bootstrap': [True, False]\n",
    "}\n",
    "\n",
    "rsearch1 = RandomizedSearchCV(estimator=RandomForestClassifier(), param_distributions=param_grid1,\n",
    "                        scoring='f1', n_jobs=4, cv=3, return_train_score=True, random_state=42)\n",
    "rsearch1.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',rsearch1.best_params_)\n",
    "print('f1 Score: ',rsearch1.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "iXdO6hY9iTjP",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iXdO6hY9iTjP",
    "outputId": "d91e5d59-8ef1-4e06-8e83-6ac1b5462026"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'n_estimators': 1000}\n",
      "f1 Score:  0.9106953532544032\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid1 = {\n",
    "    'n_estimators': [1000, 1500, 2000, 5000]\n",
    "}\n",
    "\n",
    "gsearch1 = GridSearchCV(estimator=RandomForestClassifier(), param_grid=param_grid1,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True)\n",
    "gsearch1.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',gsearch1.best_params_)\n",
    "print('f1 Score: ',gsearch1.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "X_SEdqKCgjSH",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "X_SEdqKCgjSH",
    "outputId": "7c9f0fe7-25b5-4baa-93f7-ae626a98d061"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'max_depth': 25}\n",
      "f1 Score:  nan\n"
     ]
    }
   ],
   "source": [
    "param_grid2 = {\n",
    "  'max_depth': [25, 50, None]  \n",
    "}\n",
    "\n",
    "gsearch2 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=1500), param_grid=param_grid2,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True)\n",
    "gsearch2.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',gsearch2.best_params_)\n",
    "print('f1 Score: ',gsearch2.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "29XeMnGnlKZs",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "29XeMnGnlKZs",
    "outputId": "31b428e9-665f-4fca-e30f-e9df0ed6c8a6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'max_depth': 80}\n",
      "f1 Score:  0.9102023689827566\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "param_grid2 = {\n",
    "  'max_depth': [60,80,100]  \n",
    "}\n",
    "\n",
    "rsearch2 = RandomizedSearchCV(estimator=RandomForestClassifier(n_estimators=200), param_distributions=param_grid2,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True, random_state=42)\n",
    "rsearch2.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',rsearch2.best_params_)\n",
    "print('f1 Score: ',rsearch2.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "kLVzxaT3iUsA",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kLVzxaT3iUsA",
    "outputId": "01d2b045-5c9d-4b2f-d1cb-3d7fb1c9d4ee"
   },
   "outputs": [],
   "source": [
    "param_grid3 = {\n",
    "  'min_samples_leaf': [1, 2, 3]  \n",
    "}\n",
    "\n",
    "gsearch3 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=1500, max_depth=100), param_grid=param_grid3,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True)\n",
    "gsearch3.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',gsearch3.best_params_)\n",
    "print('f1 Score: ',gsearch3.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "qqdh6yBwm_5s",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qqdh6yBwm_5s",
    "outputId": "0d1e9359-1f6c-4629-d3b0-6a5fdc38fd39"
   },
   "outputs": [],
   "source": [
    "param_grid4 = {\n",
    "  'max_features': ['auto', 'sqrt']  \n",
    "}\n",
    "\n",
    "gsearch4 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=200, max_depth=100, min_samples_leaf=1), param_grid=param_grid4,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True)\n",
    "gsearch4.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',gsearch4.best_params_)\n",
    "print('f1 Score: ',gsearch4.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "Kvm_hG7Goeot",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Kvm_hG7Goeot",
    "outputId": "66d0d7ff-750a-4c2a-dfa3-d3c5e8a9ee23"
   },
   "outputs": [],
   "source": [
    "param_grid5 = {\n",
    "  'bootstrap': [True, False]  \n",
    "}\n",
    "\n",
    "gsearch5 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=200, max_depth=100, min_samples_leaf=1, max_features='auto'), param_grid=param_grid5,\n",
    "                        scoring='f1', n_jobs=-1, cv=3, return_train_score=True)\n",
    "gsearch5.fit(X_train, y_train)\n",
    "\n",
    "print('Best parameters: ',gsearch5.best_params_)\n",
    "print('f1 Score: ',gsearch5.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "Xr3wfzEUf3Rg",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Xr3wfzEUf3Rg",
    "outputId": "85e0ccc9-1033-4a0d-8a20-ccd18bfc9098"
   },
   "outputs": [],
   "source": [
    "# classification chart of final RF model\n",
    "import time\n",
    "start = time.time()\n",
    "RF1 = RandomForestClassifier(n_estimators=200, max_depth=100, min_samples_leaf=1, max_features='auto', bootstrap=False)\n",
    "RF1.fit(X_train, y_train)\n",
    "stop = time.time()\n",
    "y_pred = RF1.predict(X_test)\n",
    "RF1_time = stop-start\n",
    "print('Classification Model: {}'.format(RF1.__class__.__name__))\n",
    "print('Execution time is: ',RF1_time,'seconds')\n",
    "print('Classification Report: \\n',classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e191e4ea",
   "metadata": {},
   "source": [
    "df.to_csv('cleaned_diabetic_data.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f00e1548",
   "metadata": {
    "id": "S6s4Fn7dq5pc"
   },
   "source": [
    "import pickle\n",
    "pickle.dump(RF1, open(r'C:\\Users\\USER\\Documents\\py pyt\\rfc_model.pkl', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f941bfc3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "diabetics_hyper.ipynb",
   "provenance": []
  },
  "gpuClass": "standard",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
